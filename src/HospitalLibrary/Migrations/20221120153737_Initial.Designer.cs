// <auto-generated />
using System;
using HospitalLibrary.Settings;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace HospitalLibrary.Migrations
{
    [DbContext(typeof(HospitalDbContext))]
    [Migration("20221120153737_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.10")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("HospitalLibrary.ApplicationUsers.Model.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AddressId")
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Enabled")
                        .HasColumnType("boolean");

                    b.Property<string>("Jmbg")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .HasColumnType("text");

                    b.Property<string>("Surname")
                        .HasColumnType("text");

                    b.Property<int>("UserRole")
                        .HasColumnType("integer");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("ApplicationUsers");
                });

            modelBuilder.Entity("HospitalLibrary.Appointments.Model.Appointment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AppointmentState")
                        .HasColumnType("integer");

                    b.Property<int>("AppointmentType")
                        .HasColumnType("integer");

                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Emergent")
                        .HasColumnType("boolean");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.ToTable("Appointments");

                    b.HasData(
                        new
                        {
                            Id = new Guid("277d8564-f047-4f20-b8c7-d18584bc555c"),
                            AppointmentState = 0,
                            AppointmentType = 0,
                            DoctorId = new Guid("e8a497f6-4426-40d6-bc16-5cb3b2118095"),
                            Emergent = false,
                            PatientId = new Guid("ba1c63ea-a609-4815-8817-7385418ab048")
                        });
                });

            modelBuilder.Entity("HospitalLibrary.BloodConsumptions.Model.BloodConsumption", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Amount")
                        .HasColumnType("integer");

                    b.Property<Guid>("BloodUnitId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uuid");

                    b.Property<string>("Purpose")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("BloodUnitId");

                    b.ToTable("BloodConsumptions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b71460cf-71ba-40f6-aaa6-2c7428e1852f"),
                            Amount = 2,
                            BloodUnitId = new Guid("1eeeeb46-685b-44d6-8da2-3728f4ded7fe"),
                            Date = new DateTime(2022, 10, 27, 15, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = new Guid("b30c53d4-dc2d-441f-8c8c-58a9cb2f7527"),
                            Purpose = "operation"
                        },
                        new
                        {
                            Id = new Guid("8ce7974c-9aa0-4f92-ad7c-0f5924ecc292"),
                            Amount = 4,
                            BloodUnitId = new Guid("1eeeeb46-685b-44d6-8da2-3728f4ded7fe"),
                            Date = new DateTime(2022, 11, 14, 15, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = new Guid("b30c53d4-dc2d-441f-8c8c-58a9cb2f7527"),
                            Purpose = "operation"
                        });
                });

            modelBuilder.Entity("HospitalLibrary.BloodUnits.Model.BloodUnit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Amount")
                        .HasColumnType("integer");

                    b.Property<string>("BloodBankName")
                        .HasColumnType("text");

                    b.Property<int>("BloodType")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("BloodUnits");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1eeeeb46-685b-44d6-8da2-3728f4ded7fe"),
                            Amount = 7,
                            BloodBankName = "Moja Banka Krvi",
                            BloodType = 0
                        },
                        new
                        {
                            Id = new Guid("a07cc82d-3b57-43af-939f-51c6f8e4ebb9"),
                            Amount = 10,
                            BloodBankName = "Moja Banka Krvi",
                            BloodType = 7
                        },
                        new
                        {
                            Id = new Guid("ef2fe890-ad75-4013-bf9a-dbd6fab618e9"),
                            Amount = 4,
                            BloodBankName = "Moja Banka Krvi",
                            BloodType = 0
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Doctors.Model.Specialization", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Specializations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0b259ebb-b69f-4333-9748-03ac110f4796"),
                            Name = "Surgeon"
                        },
                        new
                        {
                            Id = new Guid("c0dcd73f-df41-451c-9df8-ab0bef392f5c"),
                            Name = "General"
                        },
                        new
                        {
                            Id = new Guid("a1a8f9af-d4b7-4e0e-a000-99147da2aba6"),
                            Name = "Dermatology"
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Doctors.Model.WorkingSchedule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("WorkingSchedules");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a8cbddd7-2829-4ef9-bf74-eee6822a6ccf")
                        },
                        new
                        {
                            Id = new Guid("f4397a3b-c0fc-45b9-9837-44e64bb4074b")
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Feedbacks.Model.Feedback", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("isAnonymous")
                        .HasColumnType("boolean");

                    b.Property<bool>("isPublic")
                        .HasColumnType("boolean");

                    b.Property<Guid>("patientId")
                        .HasColumnType("uuid");

                    b.Property<int>("status")
                        .HasColumnType("integer");

                    b.Property<string>("text")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("patientId");

                    b.ToTable("Feedback");
                });

            modelBuilder.Entity("HospitalLibrary.Holidays.Model.Holiday", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uuid");

                    b.Property<int>("HolidayStatus")
                        .HasColumnType("integer");

                    b.Property<bool>("IsUrgent")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.ToTable("Holidays");

                    b.HasData(
                        new
                        {
                            Id = new Guid("91951219-5b9b-453a-bae3-44e2306e06bf"),
                            Description = "I want to go to Paralia",
                            DoctorId = new Guid("e8a497f6-4426-40d6-bc16-5cb3b2118095"),
                            HolidayStatus = 0,
                            IsUrgent = false
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Medicines.Model.Medicine", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Amount")
                        .HasColumnType("integer");

                    b.Property<Guid?>("MedicinePrescriptionId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("MedicinePrescriptionId");

                    b.ToTable("Medicine");
                });

            modelBuilder.Entity("HospitalLibrary.Patients.Model.PatientAdmission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateOfAdmission")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DateOfDischarge")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uuid");

                    b.Property<string>("Reason")
                        .HasColumnType("text");

                    b.Property<Guid>("SelectedBedId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SelectedRoomId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.HasIndex("SelectedBedId");

                    b.HasIndex("SelectedRoomId");

                    b.ToTable("PatientAdmissions");
                });

            modelBuilder.Entity("HospitalLibrary.Prescriptions.Model.BloodPrescription", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TreatmentReportId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.HasIndex("TreatmentReportId");

                    b.ToTable("BloodPrescription");
                });

            modelBuilder.Entity("HospitalLibrary.Prescriptions.Model.MedicinePrescription", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<Guid>("MedicineId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TreatmentReportId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.HasIndex("TreatmentReportId");

                    b.ToTable("MedicinePrescription");
                });

            modelBuilder.Entity("HospitalLibrary.Rooms.Model.Building", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Buildings");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4dad6b40-ae4c-4556-acd1-ef591abada2d"),
                            Name = "Stara bolnica"
                        },
                        new
                        {
                            Id = new Guid("7463e990-2d5b-4736-a280-edd8055ffe4d"),
                            Name = "Nova bolnica"
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Rooms.Model.Floor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BuildingId")
                        .HasColumnType("uuid");

                    b.Property<int>("FloorNumber")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("BuildingId");

                    b.ToTable("Floors");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e5ebaa22-5c75-4103-bf09-652fbb0a93e7"),
                            BuildingId = new Guid("4dad6b40-ae4c-4556-acd1-ef591abada2d"),
                            FloorNumber = 0,
                            Name = "F0"
                        },
                        new
                        {
                            Id = new Guid("881f3216-3dfb-4287-829c-83d46a4fe96f"),
                            BuildingId = new Guid("4dad6b40-ae4c-4556-acd1-ef591abada2d"),
                            FloorNumber = 1,
                            Name = "F1"
                        },
                        new
                        {
                            Id = new Guid("61b3ca26-6df4-49df-a959-71837d247b6f"),
                            BuildingId = new Guid("4dad6b40-ae4c-4556-acd1-ef591abada2d"),
                            FloorNumber = 2,
                            Name = "F2"
                        },
                        new
                        {
                            Id = new Guid("2cb41b8f-89af-4202-a244-eeaa1e585ec7"),
                            BuildingId = new Guid("7463e990-2d5b-4736-a280-edd8055ffe4d"),
                            FloorNumber = 0,
                            Name = "F0"
                        },
                        new
                        {
                            Id = new Guid("b9e0aa22-b60a-4fef-be7f-5ba80a6129dc"),
                            BuildingId = new Guid("7463e990-2d5b-4736-a280-edd8055ffe4d"),
                            FloorNumber = 1,
                            Name = "F1"
                        },
                        new
                        {
                            Id = new Guid("36bda2f7-1b57-4f2d-8227-6de2a99a954c"),
                            BuildingId = new Guid("7463e990-2d5b-4736-a280-edd8055ffe4d"),
                            FloorNumber = 2,
                            Name = "F2"
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Rooms.Model.GRoom", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Lenght")
                        .HasColumnType("integer");

                    b.Property<int>("PositionX")
                        .HasColumnType("integer");

                    b.Property<int>("PositionY")
                        .HasColumnType("integer");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("uuid");

                    b.Property<int>("Width")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("GRooms");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ef62ba48-5611-493d-9e68-8e46595bf285"),
                            Lenght = 5,
                            PositionX = 0,
                            PositionY = 0,
                            RoomId = new Guid("2e584efe-7e15-4dee-84ad-6c5665c0f780"),
                            Width = 5
                        },
                        new
                        {
                            Id = new Guid("e901867e-5f97-4a40-a3e1-d949d8e83906"),
                            Lenght = 5,
                            PositionX = 5,
                            PositionY = 0,
                            RoomId = new Guid("da3fa05a-612b-4e87-92aa-0e24b8af987f"),
                            Width = 5
                        },
                        new
                        {
                            Id = new Guid("cd23b907-7463-4102-8ee5-71e81b07e5b4"),
                            Lenght = 5,
                            PositionX = 5,
                            PositionY = 0,
                            RoomId = new Guid("07c9f772-b5d8-4702-a982-6bb1db9f50c0"),
                            Width = 5
                        },
                        new
                        {
                            Id = new Guid("187392d3-1ab8-4ce3-a523-02d1c32a6671"),
                            Lenght = 5,
                            PositionX = 5,
                            PositionY = 0,
                            RoomId = new Guid("cfe67bb5-636c-4c67-90db-8bd4c4ddb1a4"),
                            Width = 5
                        },
                        new
                        {
                            Id = new Guid("1cec57b2-08cc-4243-ba15-4cb34412641d"),
                            Lenght = 5,
                            PositionX = 5,
                            PositionY = 0,
                            RoomId = new Guid("7b2b3105-25cc-4a86-ab10-4c9fe386937e"),
                            Width = 5
                        },
                        new
                        {
                            Id = new Guid("97bffefc-e5f4-4ea6-8d5c-621ac084e40d"),
                            Lenght = 5,
                            PositionX = 5,
                            PositionY = 0,
                            RoomId = new Guid("bdc4acf9-3bc1-4d2f-a62d-f9a0788ba8a3"),
                            Width = 5
                        },
                        new
                        {
                            Id = new Guid("1ce1d9ee-8336-406f-85bd-03bd90c3c7ba"),
                            Lenght = 5,
                            PositionX = 5,
                            PositionY = 0,
                            RoomId = new Guid("8301dbac-f44f-4afc-a80b-954adf024856"),
                            Width = 5
                        },
                        new
                        {
                            Id = new Guid("e4ac2a8a-a74c-4534-9d75-880538e8cf43"),
                            Lenght = 5,
                            PositionX = 5,
                            PositionY = 0,
                            RoomId = new Guid("f1be28ef-3feb-4a3d-babd-6a82da07a6e3"),
                            Width = 5
                        },
                        new
                        {
                            Id = new Guid("b6e26878-8630-427e-b79c-b4377a845849"),
                            Lenght = 5,
                            PositionX = 5,
                            PositionY = 0,
                            RoomId = new Guid("0afadb4e-6012-4bef-bac9-7ed9c544cfe6"),
                            Width = 5
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Rooms.Model.Room", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BuildingId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("FloorId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("GRoomId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("FloorId");

                    b.ToTable("Rooms");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2e584efe-7e15-4dee-84ad-6c5665c0f780"),
                            BuildingId = new Guid("4dad6b40-ae4c-4556-acd1-ef591abada2d"),
                            FloorId = new Guid("e5ebaa22-5c75-4103-bf09-652fbb0a93e7"),
                            GRoomId = new Guid("ef62ba48-5611-493d-9e68-8e46595bf285"),
                            Name = "A11"
                        },
                        new
                        {
                            Id = new Guid("da3fa05a-612b-4e87-92aa-0e24b8af987f"),
                            BuildingId = new Guid("4dad6b40-ae4c-4556-acd1-ef591abada2d"),
                            FloorId = new Guid("e5ebaa22-5c75-4103-bf09-652fbb0a93e7"),
                            GRoomId = new Guid("e901867e-5f97-4a40-a3e1-d949d8e83906"),
                            Name = "B11"
                        },
                        new
                        {
                            Id = new Guid("07c9f772-b5d8-4702-a982-6bb1db9f50c0"),
                            BuildingId = new Guid("4dad6b40-ae4c-4556-acd1-ef591abada2d"),
                            FloorId = new Guid("881f3216-3dfb-4287-829c-83d46a4fe96f"),
                            GRoomId = new Guid("cd23b907-7463-4102-8ee5-71e81b07e5b4"),
                            Name = "A12"
                        },
                        new
                        {
                            Id = new Guid("cfe67bb5-636c-4c67-90db-8bd4c4ddb1a4"),
                            BuildingId = new Guid("4dad6b40-ae4c-4556-acd1-ef591abada2d"),
                            FloorId = new Guid("61b3ca26-6df4-49df-a959-71837d247b6f"),
                            GRoomId = new Guid("187392d3-1ab8-4ce3-a523-02d1c32a6671"),
                            Name = "A13"
                        },
                        new
                        {
                            Id = new Guid("7b2b3105-25cc-4a86-ab10-4c9fe386937e"),
                            BuildingId = new Guid("7463e990-2d5b-4736-a280-edd8055ffe4d"),
                            FloorId = new Guid("2cb41b8f-89af-4202-a244-eeaa1e585ec7"),
                            GRoomId = new Guid("1cec57b2-08cc-4243-ba15-4cb34412641d"),
                            Name = "A21"
                        },
                        new
                        {
                            Id = new Guid("bdc4acf9-3bc1-4d2f-a62d-f9a0788ba8a3"),
                            BuildingId = new Guid("7463e990-2d5b-4736-a280-edd8055ffe4d"),
                            FloorId = new Guid("2cb41b8f-89af-4202-a244-eeaa1e585ec7"),
                            GRoomId = new Guid("97bffefc-e5f4-4ea6-8d5c-621ac084e40d"),
                            Name = "B21"
                        },
                        new
                        {
                            Id = new Guid("8301dbac-f44f-4afc-a80b-954adf024856"),
                            BuildingId = new Guid("7463e990-2d5b-4736-a280-edd8055ffe4d"),
                            FloorId = new Guid("b9e0aa22-b60a-4fef-be7f-5ba80a6129dc"),
                            GRoomId = new Guid("1ce1d9ee-8336-406f-85bd-03bd90c3c7ba"),
                            Name = "A22"
                        },
                        new
                        {
                            Id = new Guid("f1be28ef-3feb-4a3d-babd-6a82da07a6e3"),
                            BuildingId = new Guid("7463e990-2d5b-4736-a280-edd8055ffe4d"),
                            FloorId = new Guid("36bda2f7-1b57-4f2d-8227-6de2a99a954c"),
                            GRoomId = new Guid("e4ac2a8a-a74c-4534-9d75-880538e8cf43"),
                            Name = "C23"
                        },
                        new
                        {
                            Id = new Guid("0afadb4e-6012-4bef-bac9-7ed9c544cfe6"),
                            BuildingId = new Guid("7463e990-2d5b-4736-a280-edd8055ffe4d"),
                            FloorId = new Guid("36bda2f7-1b57-4f2d-8227-6de2a99a954c"),
                            GRoomId = new Guid("b6e26878-8630-427e-b79c-b4377a845849"),
                            Name = "B23"
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Rooms.Model.RoomBed", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsFree")
                        .HasColumnType("boolean");

                    b.Property<string>("Number")
                        .HasColumnType("text");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RoomId");

                    b.ToTable("RoomBeds");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d43e162c-5117-423e-bc50-925715b91523"),
                            IsFree = true,
                            Number = "11A1",
                            RoomId = new Guid("2e584efe-7e15-4dee-84ad-6c5665c0f780")
                        },
                        new
                        {
                            Id = new Guid("4189af5f-7ae6-4484-a4a2-cb19aa13fc96"),
                            IsFree = true,
                            Number = "11A2",
                            RoomId = new Guid("2e584efe-7e15-4dee-84ad-6c5665c0f780")
                        },
                        new
                        {
                            Id = new Guid("6e98621e-d7b4-40a1-bed6-caa3356ebfc7"),
                            IsFree = true,
                            Number = "11A3",
                            RoomId = new Guid("2e584efe-7e15-4dee-84ad-6c5665c0f780")
                        },
                        new
                        {
                            Id = new Guid("ef224e2f-ef69-47dd-bf5e-066489b683c8"),
                            IsFree = true,
                            Number = "11A4",
                            RoomId = new Guid("2e584efe-7e15-4dee-84ad-6c5665c0f780")
                        },
                        new
                        {
                            Id = new Guid("bf031e93-898f-42d8-a893-0ce7a555d261"),
                            IsFree = true,
                            Number = "12A1",
                            RoomId = new Guid("da3fa05a-612b-4e87-92aa-0e24b8af987f")
                        },
                        new
                        {
                            Id = new Guid("8e6a285b-8ee3-4fd9-aa26-0feaed09acd4"),
                            IsFree = true,
                            Number = "12A2",
                            RoomId = new Guid("da3fa05a-612b-4e87-92aa-0e24b8af987f")
                        },
                        new
                        {
                            Id = new Guid("0031d6c6-58e0-4946-8600-d6b6bb208159"),
                            IsFree = true,
                            Number = "12A3",
                            RoomId = new Guid("da3fa05a-612b-4e87-92aa-0e24b8af987f")
                        },
                        new
                        {
                            Id = new Guid("21c45016-91b5-49b2-8b2e-8fc4c3d0bf13"),
                            IsFree = true,
                            Number = "12A4",
                            RoomId = new Guid("da3fa05a-612b-4e87-92aa-0e24b8af987f")
                        },
                        new
                        {
                            Id = new Guid("dc572b8a-fb4f-4166-8cc4-6b25dafc6d68"),
                            IsFree = true,
                            Number = "12A5",
                            RoomId = new Guid("da3fa05a-612b-4e87-92aa-0e24b8af987f")
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Rooms.Model.RoomEquipment", b =>
                {
                    b.Property<Guid>("RoomEquipmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Amount")
                        .HasColumnType("integer");

                    b.Property<string>("EquipmentName")
                        .HasColumnType("text");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("uuid");

                    b.HasKey("RoomEquipmentId");

                    b.HasIndex("RoomId");

                    b.ToTable("RoomEquipment");

                    b.HasData(
                        new
                        {
                            RoomEquipmentId = new Guid("046eb19d-c9f9-47ff-b154-985f5978da73"),
                            Amount = 15,
                            EquipmentName = "SURGICAL_TABLES",
                            RoomId = new Guid("2e584efe-7e15-4dee-84ad-6c5665c0f780")
                        },
                        new
                        {
                            RoomEquipmentId = new Guid("d1df20c9-0b38-4c77-b241-0219a914dc48"),
                            Amount = 10,
                            EquipmentName = "ANESTHESIA",
                            RoomId = new Guid("da3fa05a-612b-4e87-92aa-0e24b8af987f")
                        },
                        new
                        {
                            RoomEquipmentId = new Guid("1e5c3c01-8cce-4c42-89ab-e488d5a49122"),
                            Amount = 3,
                            EquipmentName = "EKG_MACHINE",
                            RoomId = new Guid("07c9f772-b5d8-4702-a982-6bb1db9f50c0")
                        },
                        new
                        {
                            RoomEquipmentId = new Guid("7e72c473-1804-49b8-ad63-c1152deadb4c"),
                            Amount = 1,
                            EquipmentName = "ANESTHESIA",
                            RoomId = new Guid("cfe67bb5-636c-4c67-90db-8bd4c4ddb1a4")
                        },
                        new
                        {
                            RoomEquipmentId = new Guid("616ce03f-acec-4fba-a86c-c95146e48c37"),
                            Amount = 2,
                            EquipmentName = "EKG_MACHINE",
                            RoomId = new Guid("7b2b3105-25cc-4a86-ab10-4c9fe386937e")
                        },
                        new
                        {
                            RoomEquipmentId = new Guid("32d4531b-1c86-4081-9819-2c813a2318db"),
                            Amount = 4,
                            EquipmentName = "SURGICAL_TABLES",
                            RoomId = new Guid("bdc4acf9-3bc1-4d2f-a62d-f9a0788ba8a3")
                        },
                        new
                        {
                            RoomEquipmentId = new Guid("3e4edf31-0a7c-4387-a4d6-b1116c1c1954"),
                            Amount = 6,
                            EquipmentName = "BANDAGE",
                            RoomId = new Guid("8301dbac-f44f-4afc-a80b-954adf024856")
                        },
                        new
                        {
                            RoomEquipmentId = new Guid("4ccefbb4-db8c-4f37-8210-009ac2f49ee4"),
                            Amount = 3,
                            EquipmentName = "ANESTHESIA",
                            RoomId = new Guid("f1be28ef-3feb-4a3d-babd-6a82da07a6e3")
                        },
                        new
                        {
                            RoomEquipmentId = new Guid("84c2a6d0-e35a-453e-a734-ccd943db7f5f"),
                            Amount = 9,
                            EquipmentName = "SURGICAL_TABLES",
                            RoomId = new Guid("0afadb4e-6012-4bef-bac9-7ed9c544cfe6")
                        },
                        new
                        {
                            RoomEquipmentId = new Guid("7add0278-aa64-4047-a884-dac3dea3158d"),
                            Amount = 5,
                            EquipmentName = "SURGICAL_TABLES",
                            RoomId = new Guid("da3fa05a-612b-4e87-92aa-0e24b8af987f")
                        },
                        new
                        {
                            RoomEquipmentId = new Guid("52dac854-6736-4b78-bd42-646206ce2fbd"),
                            Amount = 3,
                            EquipmentName = "EKG_MACHINE",
                            RoomId = new Guid("da3fa05a-612b-4e87-92aa-0e24b8af987f")
                        },
                        new
                        {
                            RoomEquipmentId = new Guid("2c2f1909-7a35-4511-8f02-5d7769288de3"),
                            Amount = 3,
                            EquipmentName = "ANESTHESIA",
                            RoomId = new Guid("2e584efe-7e15-4dee-84ad-6c5665c0f780")
                        },
                        new
                        {
                            RoomEquipmentId = new Guid("4ca35b8d-b082-43cc-b224-6f5cce015dcd"),
                            Amount = 3,
                            EquipmentName = "SYRINGE",
                            RoomId = new Guid("8301dbac-f44f-4afc-a80b-954adf024856")
                        },
                        new
                        {
                            RoomEquipmentId = new Guid("c47d0f64-a417-47d3-9912-c893c74f63e8"),
                            Amount = 9,
                            EquipmentName = "SYRINGE",
                            RoomId = new Guid("0afadb4e-6012-4bef-bac9-7ed9c544cfe6")
                        },
                        new
                        {
                            RoomEquipmentId = new Guid("91d69c27-ba66-490a-bd3e-64c37af428cb"),
                            Amount = 11,
                            EquipmentName = "SURGICAL_TABLES",
                            RoomId = new Guid("cfe67bb5-636c-4c67-90db-8bd4c4ddb1a4")
                        });
                });

            modelBuilder.Entity("HospitalLibrary.TreatmentReports.Model.TreatmentReport", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uuid");

                    b.Property<string>("ReasonOfDischarge")
                        .HasColumnType("text");

                    b.Property<string>("ReasonOfHospitalization")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.ToTable("TreatmentReport");
                });

            modelBuilder.Entity("HospitalLibrary.sharedModel.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("City")
                        .HasColumnType("text");

                    b.Property<string>("Country")
                        .HasColumnType("text");

                    b.Property<int>("Postcode")
                        .HasColumnType("integer");

                    b.Property<string>("Street")
                        .HasColumnType("text");

                    b.Property<string>("StreetNumber")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Addresses");

                    b.HasData(
                        new
                        {
                            Id = new Guid("efff96ac-a65a-4438-9ac7-f2054ae39da4"),
                            City = "Novi Sad",
                            Country = "Serbia",
                            Postcode = 21000,
                            Street = "Kosovska",
                            StreetNumber = "23A"
                        },
                        new
                        {
                            Id = new Guid("af07eba6-a31b-401d-9c9c-41cc195611af"),
                            City = "Novi Sad",
                            Country = "Serbia",
                            Postcode = 21000,
                            Street = "Partizanska",
                            StreetNumber = "33"
                        },
                        new
                        {
                            Id = new Guid("fbf157ec-f2bc-4c9e-a975-5ad652d98bd1"),
                            City = "Novi Sad",
                            Country = "Serbia",
                            Postcode = 21000,
                            Street = "JNA",
                            StreetNumber = "33"
                        });
                });

            modelBuilder.Entity("HospitalLibrary.sharedModel.Ingredient", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Ingredient");
                });

            modelBuilder.Entity("IngredientMedicine", b =>
                {
                    b.Property<Guid>("IngredientsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MedicinesId")
                        .HasColumnType("uuid");

                    b.HasKey("IngredientsId", "MedicinesId");

                    b.HasIndex("MedicinesId");

                    b.ToTable("IngredientMedicine");
                });

            modelBuilder.Entity("IngredientPatient", b =>
                {
                    b.Property<Guid>("AllergiesId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PatientsId")
                        .HasColumnType("uuid");

                    b.HasKey("AllergiesId", "PatientsId");

                    b.HasIndex("PatientsId");

                    b.ToTable("IngredientPatient");
                });

            modelBuilder.Entity("HospitalLibrary.Doctors.Model.Doctor", b =>
                {
                    b.HasBaseType("HospitalLibrary.ApplicationUsers.Model.ApplicationUser");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SpecializationId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("WorkingScheduleId")
                        .HasColumnType("uuid");

                    b.HasIndex("RoomId")
                        .IsUnique();

                    b.HasIndex("SpecializationId");

                    b.HasIndex("WorkingScheduleId");

                    b.ToTable("Doctors");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b30c53d4-dc2d-441f-8c8c-58a9cb2f7527"),
                            AddressId = new Guid("af07eba6-a31b-401d-9c9c-41cc195611af"),
                            Email = "DjordjeLopov@gmail.com",
                            Enabled = true,
                            Jmbg = "99999999",
                            Name = "Djordje",
                            Password = "VNEXwZIHrujyvlg0wnmHM2FkQ52BKSkUTv5Gobgj4MeeAADy",
                            Phone = "+612222222",
                            Surname = "Vuckovic",
                            UserRole = 0,
                            Username = "Tadjo",
                            RoomId = new Guid("da3fa05a-612b-4e87-92aa-0e24b8af987f"),
                            SpecializationId = new Guid("a1a8f9af-d4b7-4e0e-a000-99147da2aba6"),
                            WorkingScheduleId = new Guid("a8cbddd7-2829-4ef9-bf74-eee6822a6ccf")
                        },
                        new
                        {
                            Id = new Guid("e8a497f6-4426-40d6-bc16-5cb3b2118095"),
                            AddressId = new Guid("efff96ac-a65a-4438-9ac7-f2054ae39da4"),
                            Email = "Cajons@gmail.com",
                            Enabled = true,
                            Jmbg = "99999999",
                            Name = "Ilija",
                            Password = "VNEXwZIHrujyvlg0wnmHM2FkQ52BKSkUTv5Gobgj4MeeAADy",
                            Phone = "+612222222",
                            Surname = "Maric",
                            UserRole = 0,
                            Username = "Ilija",
                            RoomId = new Guid("2e584efe-7e15-4dee-84ad-6c5665c0f780"),
                            SpecializationId = new Guid("a1a8f9af-d4b7-4e0e-a000-99147da2aba6"),
                            WorkingScheduleId = new Guid("a8cbddd7-2829-4ef9-bf74-eee6822a6ccf")
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Managers.Manager", b =>
                {
                    b.HasBaseType("HospitalLibrary.ApplicationUsers.Model.ApplicationUser");

                    b.ToTable("Managers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("699fd0e8-ba02-4e04-a628-30cf5b2be97e"),
                            AddressId = new Guid("fbf157ec-f2bc-4c9e-a975-5ad652d98bd1"),
                            Email = "psw.isa.mail@gmail.com",
                            Enabled = true,
                            Jmbg = "99999999",
                            Name = "Manager",
                            Password = "VNEXwZIHrujyvlg0wnmHM2FkQ52BKSkUTv5Gobgj4MeeAADy",
                            Phone = "+612222222",
                            Surname = "Manger",
                            UserRole = 1,
                            Username = "Manager"
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Patients.Model.Patient", b =>
                {
                    b.HasBaseType("HospitalLibrary.ApplicationUsers.Model.ApplicationUser");

                    b.Property<int>("Gender")
                        .HasColumnType("integer");

                    b.ToTable("Patients");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ba1c63ea-a609-4815-8817-7385418ab048"),
                            AddressId = new Guid("efff96ac-a65a-4438-9ac7-f2054ae39da4"),
                            Email = "psw.isa.mail@gmail.com",
                            Enabled = true,
                            Jmbg = "99999999",
                            Name = "Sale",
                            Password = "VNEXwZIHrujyvlg0wnmHM2FkQ52BKSkUTv5Gobgj4MeeAADy",
                            Phone = "+612222222",
                            Surname = "Lave",
                            UserRole = 2,
                            Username = "Sale",
                            Gender = 0
                        },
                        new
                        {
                            Id = new Guid("4f228a22-3961-43ea-bdd1-3dfedbb65c21"),
                            AddressId = new Guid("fbf157ec-f2bc-4c9e-a975-5ad652d98bd1"),
                            Email = "psw.isa.mail@gmail.com",
                            Enabled = true,
                            Jmbg = "99999999",
                            Name = "Miki",
                            Password = "VNEXwZIHrujyvlg0wnmHM2FkQ52BKSkUTv5Gobgj4MeeAADy",
                            Phone = "+612222222",
                            Surname = "Djuricic",
                            UserRole = 2,
                            Username = "Miki",
                            Gender = 0
                        });
                });

            modelBuilder.Entity("HospitalLibrary.ApplicationUsers.Model.ApplicationUser", b =>
                {
                    b.HasOne("HospitalLibrary.sharedModel.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");
                });

            modelBuilder.Entity("HospitalLibrary.Appointments.Model.Appointment", b =>
                {
                    b.HasOne("HospitalLibrary.Doctors.Model.Doctor", "Doctor")
                        .WithMany("Appointments")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalLibrary.Patients.Model.Patient", "Patient")
                        .WithMany("Appointments")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("HospitalLibrary.sharedModel.DateRange", "Duration", b1 =>
                        {
                            b1.Property<Guid>("AppointmentId")
                                .HasColumnType("uuid");

                            b1.Property<DateTime>("From")
                                .HasColumnType("timestamp without time zone");

                            b1.Property<DateTime>("To")
                                .HasColumnType("timestamp without time zone");

                            b1.HasKey("AppointmentId");

                            b1.ToTable("Appointments");

                            b1.WithOwner()
                                .HasForeignKey("AppointmentId");

                            b1.HasData(
                                new
                                {
                                    AppointmentId = new Guid("277d8564-f047-4f20-b8c7-d18584bc555c"),
                                    From = new DateTime(2023, 7, 27, 10, 0, 0, 0, DateTimeKind.Unspecified),
                                    To = new DateTime(2023, 7, 27, 10, 30, 0, 0, DateTimeKind.Unspecified)
                                });
                        });

                    b.Navigation("Doctor");

                    b.Navigation("Duration");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("HospitalLibrary.BloodConsumptions.Model.BloodConsumption", b =>
                {
                    b.HasOne("HospitalLibrary.BloodUnits.Model.BloodUnit", "BloodUnit")
                        .WithMany("Consumptions")
                        .HasForeignKey("BloodUnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BloodUnit");
                });

            modelBuilder.Entity("HospitalLibrary.Doctors.Model.WorkingSchedule", b =>
                {
                    b.OwnsOne("HospitalLibrary.sharedModel.DateRange", "DayOfWork", b1 =>
                        {
                            b1.Property<Guid>("WorkingScheduleId")
                                .HasColumnType("uuid");

                            b1.Property<DateTime>("From")
                                .HasColumnType("timestamp without time zone")
                                .HasColumnName("DayOfWorkFrom");

                            b1.Property<DateTime>("To")
                                .HasColumnType("timestamp without time zone")
                                .HasColumnName("DayOfWorkTo");

                            b1.HasKey("WorkingScheduleId");

                            b1.ToTable("WorkingSchedules");

                            b1.WithOwner()
                                .HasForeignKey("WorkingScheduleId");

                            b1.HasData(
                                new
                                {
                                    WorkingScheduleId = new Guid("a8cbddd7-2829-4ef9-bf74-eee6822a6ccf"),
                                    From = new DateTime(2022, 10, 27, 8, 0, 0, 0, DateTimeKind.Unspecified),
                                    To = new DateTime(2023, 12, 27, 14, 0, 0, 0, DateTimeKind.Unspecified)
                                },
                                new
                                {
                                    WorkingScheduleId = new Guid("f4397a3b-c0fc-45b9-9837-44e64bb4074b"),
                                    From = new DateTime(2022, 10, 27, 14, 0, 0, 0, DateTimeKind.Unspecified),
                                    To = new DateTime(2022, 10, 27, 22, 0, 0, 0, DateTimeKind.Unspecified)
                                });
                        });

                    b.OwnsOne("HospitalLibrary.sharedModel.DateRange", "ExpirationDate", b1 =>
                        {
                            b1.Property<Guid>("WorkingScheduleId")
                                .HasColumnType("uuid");

                            b1.Property<DateTime>("From")
                                .HasColumnType("timestamp without time zone")
                                .HasColumnName("ExpirationFrom");

                            b1.Property<DateTime>("To")
                                .HasColumnType("timestamp without time zone")
                                .HasColumnName("ExpirationTo");

                            b1.HasKey("WorkingScheduleId");

                            b1.ToTable("WorkingSchedules");

                            b1.WithOwner()
                                .HasForeignKey("WorkingScheduleId");

                            b1.HasData(
                                new
                                {
                                    WorkingScheduleId = new Guid("a8cbddd7-2829-4ef9-bf74-eee6822a6ccf"),
                                    From = new DateTime(2022, 10, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                                    To = new DateTime(2023, 12, 27, 0, 0, 0, 0, DateTimeKind.Unspecified)
                                },
                                new
                                {
                                    WorkingScheduleId = new Guid("f4397a3b-c0fc-45b9-9837-44e64bb4074b"),
                                    From = new DateTime(2022, 10, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                                    To = new DateTime(2023, 12, 27, 0, 0, 0, 0, DateTimeKind.Unspecified)
                                });
                        });

                    b.Navigation("DayOfWork");

                    b.Navigation("ExpirationDate");
                });

            modelBuilder.Entity("HospitalLibrary.Feedbacks.Model.Feedback", b =>
                {
                    b.HasOne("HospitalLibrary.Patients.Model.Patient", "patient")
                        .WithMany("Feedbacks")
                        .HasForeignKey("patientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("patient");
                });

            modelBuilder.Entity("HospitalLibrary.Holidays.Model.Holiday", b =>
                {
                    b.HasOne("HospitalLibrary.Doctors.Model.Doctor", "Doctor")
                        .WithMany("Holidays")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("HospitalLibrary.sharedModel.DateRange", "DateRange", b1 =>
                        {
                            b1.Property<Guid>("HolidayId")
                                .HasColumnType("uuid");

                            b1.Property<DateTime>("From")
                                .HasColumnType("timestamp without time zone");

                            b1.Property<DateTime>("To")
                                .HasColumnType("timestamp without time zone");

                            b1.HasKey("HolidayId");

                            b1.ToTable("Holidays");

                            b1.WithOwner()
                                .HasForeignKey("HolidayId");

                            b1.HasData(
                                new
                                {
                                    HolidayId = new Guid("91951219-5b9b-453a-bae3-44e2306e06bf"),
                                    From = new DateTime(2022, 10, 27, 10, 0, 0, 0, DateTimeKind.Unspecified),
                                    To = new DateTime(2022, 10, 27, 10, 30, 0, 0, DateTimeKind.Unspecified)
                                });
                        });

                    b.Navigation("DateRange");

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("HospitalLibrary.Medicines.Model.Medicine", b =>
                {
                    b.HasOne("HospitalLibrary.Prescriptions.Model.MedicinePrescription", null)
                        .WithMany("Medicines")
                        .HasForeignKey("MedicinePrescriptionId");
                });

            modelBuilder.Entity("HospitalLibrary.Patients.Model.PatientAdmission", b =>
                {
                    b.HasOne("HospitalLibrary.Patients.Model.Patient", "Patient")
                        .WithMany("PatientAdmissions")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalLibrary.Rooms.Model.RoomBed", "SelectedBed")
                        .WithMany()
                        .HasForeignKey("SelectedBedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalLibrary.Rooms.Model.Room", "SelectedRoom")
                        .WithMany()
                        .HasForeignKey("SelectedRoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");

                    b.Navigation("SelectedBed");

                    b.Navigation("SelectedRoom");
                });

            modelBuilder.Entity("HospitalLibrary.Prescriptions.Model.BloodPrescription", b =>
                {
                    b.HasOne("HospitalLibrary.Patients.Model.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalLibrary.TreatmentReports.Model.TreatmentReport", "TreatmentReport")
                        .WithMany("BloodPrescriptions")
                        .HasForeignKey("TreatmentReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");

                    b.Navigation("TreatmentReport");
                });

            modelBuilder.Entity("HospitalLibrary.Prescriptions.Model.MedicinePrescription", b =>
                {
                    b.HasOne("HospitalLibrary.Patients.Model.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalLibrary.TreatmentReports.Model.TreatmentReport", "TreatmentReport")
                        .WithMany("MedicinePrescriptions")
                        .HasForeignKey("TreatmentReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");

                    b.Navigation("TreatmentReport");
                });

            modelBuilder.Entity("HospitalLibrary.Rooms.Model.Floor", b =>
                {
                    b.HasOne("HospitalLibrary.Rooms.Model.Building", "Building")
                        .WithMany("Floors")
                        .HasForeignKey("BuildingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Building");
                });

            modelBuilder.Entity("HospitalLibrary.Rooms.Model.Room", b =>
                {
                    b.HasOne("HospitalLibrary.Rooms.Model.Floor", "Floor")
                        .WithMany("Rooms")
                        .HasForeignKey("FloorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Floor");
                });

            modelBuilder.Entity("HospitalLibrary.Rooms.Model.RoomBed", b =>
                {
                    b.HasOne("HospitalLibrary.Rooms.Model.Room", "Room")
                        .WithMany("Beds")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Room");
                });

            modelBuilder.Entity("HospitalLibrary.Rooms.Model.RoomEquipment", b =>
                {
                    b.HasOne("HospitalLibrary.Rooms.Model.Room", null)
                        .WithMany("Equipments")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HospitalLibrary.TreatmentReports.Model.TreatmentReport", b =>
                {
                    b.HasOne("HospitalLibrary.Patients.Model.Patient", "Patient")
                        .WithMany("TreatmentReports")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("HospitalLibrary.sharedModel.DateRange", "DateRange", b1 =>
                        {
                            b1.Property<Guid>("TreatmentReportId")
                                .HasColumnType("uuid");

                            b1.Property<DateTime>("From")
                                .HasColumnType("timestamp without time zone");

                            b1.Property<DateTime>("To")
                                .HasColumnType("timestamp without time zone");

                            b1.HasKey("TreatmentReportId");

                            b1.ToTable("TreatmentReport");

                            b1.WithOwner()
                                .HasForeignKey("TreatmentReportId");
                        });

                    b.Navigation("DateRange");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("IngredientMedicine", b =>
                {
                    b.HasOne("HospitalLibrary.sharedModel.Ingredient", null)
                        .WithMany()
                        .HasForeignKey("IngredientsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalLibrary.Medicines.Model.Medicine", null)
                        .WithMany()
                        .HasForeignKey("MedicinesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("IngredientPatient", b =>
                {
                    b.HasOne("HospitalLibrary.sharedModel.Ingredient", null)
                        .WithMany()
                        .HasForeignKey("AllergiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalLibrary.Patients.Model.Patient", null)
                        .WithMany()
                        .HasForeignKey("PatientsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HospitalLibrary.Doctors.Model.Doctor", b =>
                {
                    b.HasOne("HospitalLibrary.ApplicationUsers.Model.ApplicationUser", null)
                        .WithOne()
                        .HasForeignKey("HospitalLibrary.Doctors.Model.Doctor", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalLibrary.Rooms.Model.Room", "Room")
                        .WithOne("Doctor")
                        .HasForeignKey("HospitalLibrary.Doctors.Model.Doctor", "RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalLibrary.Doctors.Model.Specialization", "Specialization")
                        .WithMany("Doctors")
                        .HasForeignKey("SpecializationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalLibrary.Doctors.Model.WorkingSchedule", "WorkingSchedule")
                        .WithMany()
                        .HasForeignKey("WorkingScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Room");

                    b.Navigation("Specialization");

                    b.Navigation("WorkingSchedule");
                });

            modelBuilder.Entity("HospitalLibrary.Managers.Manager", b =>
                {
                    b.HasOne("HospitalLibrary.ApplicationUsers.Model.ApplicationUser", null)
                        .WithOne()
                        .HasForeignKey("HospitalLibrary.Managers.Manager", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HospitalLibrary.Patients.Model.Patient", b =>
                {
                    b.HasOne("HospitalLibrary.ApplicationUsers.Model.ApplicationUser", null)
                        .WithOne()
                        .HasForeignKey("HospitalLibrary.Patients.Model.Patient", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HospitalLibrary.BloodUnits.Model.BloodUnit", b =>
                {
                    b.Navigation("Consumptions");
                });

            modelBuilder.Entity("HospitalLibrary.Doctors.Model.Specialization", b =>
                {
                    b.Navigation("Doctors");
                });

            modelBuilder.Entity("HospitalLibrary.Prescriptions.Model.MedicinePrescription", b =>
                {
                    b.Navigation("Medicines");
                });

            modelBuilder.Entity("HospitalLibrary.Rooms.Model.Building", b =>
                {
                    b.Navigation("Floors");
                });

            modelBuilder.Entity("HospitalLibrary.Rooms.Model.Floor", b =>
                {
                    b.Navigation("Rooms");
                });

            modelBuilder.Entity("HospitalLibrary.Rooms.Model.Room", b =>
                {
                    b.Navigation("Beds");

                    b.Navigation("Doctor");

                    b.Navigation("Equipments");
                });

            modelBuilder.Entity("HospitalLibrary.TreatmentReports.Model.TreatmentReport", b =>
                {
                    b.Navigation("BloodPrescriptions");

                    b.Navigation("MedicinePrescriptions");
                });

            modelBuilder.Entity("HospitalLibrary.Doctors.Model.Doctor", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Holidays");
                });

            modelBuilder.Entity("HospitalLibrary.Patients.Model.Patient", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Feedbacks");

                    b.Navigation("PatientAdmissions");

                    b.Navigation("TreatmentReports");
                });
#pragma warning restore 612, 618
        }
    }
}
