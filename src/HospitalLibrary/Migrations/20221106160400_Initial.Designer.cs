// <auto-generated />
using System;
using HospitalLibrary.Settings;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace HospitalLibrary.Migrations
{
    [DbContext(typeof(HospitalDbContext))]
    [Migration("20221106160400_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("HospitalLibrary.Appointments.Model.Appointment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AppointmentState")
                        .HasColumnType("integer");

                    b.Property<int>("AppointmentType")
                        .HasColumnType("integer");

                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Emergent")
                        .HasColumnType("boolean");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.ToTable("Appointments");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9e8cc086-bfd4-49bb-9cec-b3779175e00d"),
                            AppointmentState = 0,
                            AppointmentType = 0,
                            DoctorId = new Guid("6e528822-1bcb-47c1-8ffd-040c2452e405"),
                            Emergent = false,
                            PatientId = new Guid("3e8a319d-b198-4728-b750-fc2b664603ec")
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Core.Model.Building", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Buildings");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8de75908-eec2-4768-a4f4-d6b75e27e50e"),
                            Name = "Stara bolnica"
                        },
                        new
                        {
                            Id = new Guid("12fa33b4-e393-4328-be7c-921237aab187"),
                            Name = "Nova bolnica"
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Core.Model.Floor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BuildingId")
                        .HasColumnType("uuid");

                    b.Property<int>("FloorNumber")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("BuildingId");

                    b.ToTable("Floors");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b9028eb5-382a-4761-84f5-cd2ae8003127"),
                            BuildingId = new Guid("8de75908-eec2-4768-a4f4-d6b75e27e50e"),
                            FloorNumber = 0,
                            Name = "F0"
                        },
                        new
                        {
                            Id = new Guid("a9f0e448-0c07-4f47-a19b-df63cc8a3039"),
                            BuildingId = new Guid("8de75908-eec2-4768-a4f4-d6b75e27e50e"),
                            FloorNumber = 1,
                            Name = "F1"
                        },
                        new
                        {
                            Id = new Guid("c8a7e635-458e-4050-abfd-76fb9039947b"),
                            BuildingId = new Guid("8de75908-eec2-4768-a4f4-d6b75e27e50e"),
                            FloorNumber = 2,
                            Name = "F2"
                        },
                        new
                        {
                            Id = new Guid("76fdb478-ded4-4e50-8387-035c0763775e"),
                            BuildingId = new Guid("12fa33b4-e393-4328-be7c-921237aab187"),
                            FloorNumber = 0,
                            Name = "F0"
                        },
                        new
                        {
                            Id = new Guid("eb55f925-c730-4b07-b468-521ea147de37"),
                            BuildingId = new Guid("12fa33b4-e393-4328-be7c-921237aab187"),
                            FloorNumber = 1,
                            Name = "F1"
                        },
                        new
                        {
                            Id = new Guid("617ef46b-12d8-45dd-b9bd-cbf144ce5d80"),
                            BuildingId = new Guid("12fa33b4-e393-4328-be7c-921237aab187"),
                            FloorNumber = 2,
                            Name = "F2"
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Core.Model.FloorPlanView", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Lenght")
                        .HasColumnType("integer");

                    b.Property<int>("PosX")
                        .HasColumnType("integer");

                    b.Property<int>("PosY")
                        .HasColumnType("integer");

                    b.Property<int>("Width")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("FloorPlanViews");

                    b.HasData(
                        new
                        {
                            Id = new Guid("493d37e4-98d4-4119-9797-ad859171da34"),
                            Lenght = 5,
                            PosX = 0,
                            PosY = 0,
                            Width = 5
                        },
                        new
                        {
                            Id = new Guid("eb147559-e72d-4553-9daf-edd83eb39f2e"),
                            Lenght = 5,
                            PosX = 5,
                            PosY = 0,
                            Width = 5
                        },
                        new
                        {
                            Id = new Guid("7bf3737f-8337-42bb-bd9f-9b123ac8f926"),
                            Lenght = 5,
                            PosX = 0,
                            PosY = 5,
                            Width = 5
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Core.Model.Room", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BuildingId")
                        .HasColumnType("uuid");

                    b.Property<string>("BuildingName")
                        .HasColumnType("text");

                    b.Property<Guid>("FloorId")
                        .HasColumnType("uuid");

                    b.Property<string>("FloorName")
                        .HasColumnType("text");

                    b.Property<int>("Lenght")
                        .HasColumnType("integer");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("PositionX")
                        .HasColumnType("integer");

                    b.Property<int>("PositionY")
                        .HasColumnType("integer");

                    b.Property<int>("Width")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("BuildingId");

                    b.HasIndex("FloorId");

                    b.ToTable("Rooms");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a1dd080a-d477-4fa1-9271-574da66dc569"),
                            BuildingId = new Guid("8de75908-eec2-4768-a4f4-d6b75e27e50e"),
                            BuildingName = "Stara zgrada",
                            FloorId = new Guid("b9028eb5-382a-4761-84f5-cd2ae8003127"),
                            FloorName = "Prvi",
                            Lenght = 5,
                            Number = "11A",
                            PositionX = 0,
                            PositionY = 0,
                            Width = 5
                        },
                        new
                        {
                            Id = new Guid("90723cfc-5486-4d70-9bc4-87c1de4bb8f0"),
                            BuildingId = new Guid("8de75908-eec2-4768-a4f4-d6b75e27e50e"),
                            BuildingName = "Stara zgrada",
                            FloorId = new Guid("b9028eb5-382a-4761-84f5-cd2ae8003127"),
                            FloorName = "Prvi",
                            Lenght = 5,
                            Number = "12A",
                            PositionX = 5,
                            PositionY = 0,
                            Width = 5
                        },
                        new
                        {
                            Id = new Guid("332583ce-f2c5-4b49-a372-f9731b2b3c72"),
                            BuildingId = new Guid("8de75908-eec2-4768-a4f4-d6b75e27e50e"),
                            BuildingName = "Stara zgrada",
                            FloorId = new Guid("a9f0e448-0c07-4f47-a19b-df63cc8a3039"),
                            FloorName = "Drugi",
                            Lenght = 5,
                            Number = "13A",
                            PositionX = 10,
                            PositionY = 0,
                            Width = 5
                        },
                        new
                        {
                            Id = new Guid("1c9ddd14-7c3e-4f91-a2d2-30ba63d600ab"),
                            BuildingId = new Guid("8de75908-eec2-4768-a4f4-d6b75e27e50e"),
                            BuildingName = "Stara zgrada",
                            FloorId = new Guid("c8a7e635-458e-4050-abfd-76fb9039947b"),
                            FloorName = "Treci",
                            Lenght = 5,
                            Number = "14A",
                            PositionX = 0,
                            PositionY = 5,
                            Width = 5
                        },
                        new
                        {
                            Id = new Guid("6055370d-a08d-4928-8f5c-2240a29e4c6c"),
                            BuildingId = new Guid("12fa33b4-e393-4328-be7c-921237aab187"),
                            BuildingName = "Nova zgrada",
                            FloorId = new Guid("76fdb478-ded4-4e50-8387-035c0763775e"),
                            FloorName = "Prvi",
                            Lenght = 5,
                            Number = "11B",
                            PositionX = 0,
                            PositionY = 10,
                            Width = 5
                        },
                        new
                        {
                            Id = new Guid("da60fd73-5068-45d6-902b-edf9874443d0"),
                            BuildingId = new Guid("12fa33b4-e393-4328-be7c-921237aab187"),
                            BuildingName = "Nova zgrada",
                            FloorId = new Guid("76fdb478-ded4-4e50-8387-035c0763775e"),
                            FloorName = "Prvi",
                            Lenght = 5,
                            Number = "12B",
                            PositionX = 5,
                            PositionY = 5,
                            Width = 5
                        },
                        new
                        {
                            Id = new Guid("14ce1d91-f11d-4c06-b5d0-9c192c567d25"),
                            BuildingId = new Guid("12fa33b4-e393-4328-be7c-921237aab187"),
                            BuildingName = "Nova zgrada",
                            FloorId = new Guid("eb55f925-c730-4b07-b468-521ea147de37"),
                            FloorName = "Drugi",
                            Lenght = 5,
                            Number = "13B",
                            PositionX = 10,
                            PositionY = 5,
                            Width = 5
                        },
                        new
                        {
                            Id = new Guid("3e02d330-c450-4236-8c29-b61fbd1bc6ec"),
                            BuildingId = new Guid("12fa33b4-e393-4328-be7c-921237aab187"),
                            BuildingName = "Nova zgrada",
                            FloorId = new Guid("617ef46b-12d8-45dd-b9bd-cbf144ce5d80"),
                            FloorName = "Treci",
                            Lenght = 10,
                            Number = "14B",
                            PositionX = 0,
                            PositionY = 0,
                            Width = 20
                        },
                        new
                        {
                            Id = new Guid("de443497-0784-4f0e-956f-526920e4a15a"),
                            BuildingId = new Guid("12fa33b4-e393-4328-be7c-921237aab187"),
                            BuildingName = "Nova zgrada",
                            FloorId = new Guid("617ef46b-12d8-45dd-b9bd-cbf144ce5d80"),
                            FloorName = "Treci",
                            Lenght = 5,
                            Number = "15B",
                            PositionX = 0,
                            PositionY = 10,
                            Width = 20
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Doctors.Model.Doctor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AddressId")
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Jmbg")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .HasColumnType("text");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SpecializationId")
                        .HasColumnType("uuid");

                    b.Property<string>("Surname")
                        .HasColumnType("text");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("WorkingScheduleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("RoomId")
                        .IsUnique();

                    b.HasIndex("SpecializationId");

                    b.HasIndex("WorkingScheduleId");

                    b.ToTable("Doctors");

                    b.HasData(
                        new
                        {
                            Id = new Guid("29154a3a-e297-4bd4-a89f-b6694220f76c"),
                            AddressId = new Guid("a4e8f397-44ce-4ff9-86a3-20b413abf962"),
                            Email = "DjordjeLopov@gmail.com",
                            Jmbg = "99999999",
                            Name = "Djordje",
                            Password = "miki123",
                            Phone = "+612222222",
                            RoomId = new Guid("90723cfc-5486-4d70-9bc4-87c1de4bb8f0"),
                            SpecializationId = new Guid("f0986efa-335b-48e3-817b-b3d151693d2d"),
                            Surname = "Vuckovic",
                            Username = "Tadjo",
                            WorkingScheduleId = new Guid("3937c0a9-ac06-45ba-a1d7-656f8687596b")
                        },
                        new
                        {
                            Id = new Guid("6e528822-1bcb-47c1-8ffd-040c2452e405"),
                            AddressId = new Guid("51561636-7d8f-49b6-9192-29fe749a657a"),
                            Email = "Cajons@gmail.com",
                            Jmbg = "99999999",
                            Name = "Ilija",
                            Password = "miki123",
                            Phone = "+612222222",
                            RoomId = new Guid("a1dd080a-d477-4fa1-9271-574da66dc569"),
                            SpecializationId = new Guid("f0986efa-335b-48e3-817b-b3d151693d2d"),
                            Surname = "Maric",
                            Username = "Ilija",
                            WorkingScheduleId = new Guid("5be2491b-0fb1-4e77-a201-8f903b957cb6")
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Doctors.Model.Holiday", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("DoctorId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.ToTable("Holiday");
                });

            modelBuilder.Entity("HospitalLibrary.Doctors.Model.Specialization", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Specializations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9fb10f03-5d5b-4af2-a28d-c75e660ab68b"),
                            Name = "Surgeon"
                        },
                        new
                        {
                            Id = new Guid("4bb49eb7-9bf4-4a5e-bb9e-76214c4f113f"),
                            Name = "General"
                        },
                        new
                        {
                            Id = new Guid("f0986efa-335b-48e3-817b-b3d151693d2d"),
                            Name = "Dermatology"
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Doctors.Model.WorkingSchedule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("WorkingSchedules");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3937c0a9-ac06-45ba-a1d7-656f8687596b")
                        },
                        new
                        {
                            Id = new Guid("5be2491b-0fb1-4e77-a201-8f903b957cb6")
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Feedbacks.Model.Feedback", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("isAnonymous")
                        .HasColumnType("boolean");

                    b.Property<bool>("isPublic")
                        .HasColumnType("boolean");

                    b.Property<Guid>("patientId")
                        .HasColumnType("uuid");

                    b.Property<int>("status")
                        .HasColumnType("integer");

                    b.Property<string>("text")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("patientId");

                    b.ToTable("Feedback");
                });

            modelBuilder.Entity("HospitalLibrary.Patients.Model.Patient", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AddressId")
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("Jmbg")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .HasColumnType("text");

                    b.Property<string>("Surname")
                        .HasColumnType("text");

                    b.Property<string>("Username")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.ToTable("Patient");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3e8a319d-b198-4728-b750-fc2b664603ec"),
                            AddressId = new Guid("51561636-7d8f-49b6-9192-29fe749a657a"),
                            Email = "psw.isa.mail@gmail.com",
                            Jmbg = "99999999",
                            Name = "Sale",
                            Password = "sale1312",
                            Phone = "+612222222",
                            Surname = "Lave",
                            Username = "Sale"
                        },
                        new
                        {
                            Id = new Guid("b0854648-b406-47b7-8ea2-95d6f19b4b00"),
                            AddressId = new Guid("1bc87db4-ebae-4c3c-a69e-d822c0801704"),
                            Email = "psw.isa.mail@gmail.com",
                            Jmbg = "99999999",
                            Name = "Miki",
                            Password = "sale1312",
                            Phone = "+612222222",
                            Surname = "Djuricic",
                            Username = "Miki"
                        });
                });

            modelBuilder.Entity("HospitalLibrary.sharedModel.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("City")
                        .HasColumnType("text");

                    b.Property<string>("Country")
                        .HasColumnType("text");

                    b.Property<int>("Postcode")
                        .HasColumnType("integer");

                    b.Property<string>("Street")
                        .HasColumnType("text");

                    b.Property<string>("StreetNumber")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Addresses");

                    b.HasData(
                        new
                        {
                            Id = new Guid("51561636-7d8f-49b6-9192-29fe749a657a"),
                            City = "Novi Sad",
                            Country = "Serbia",
                            Postcode = 21000,
                            Street = "Kosovska",
                            StreetNumber = "23A"
                        },
                        new
                        {
                            Id = new Guid("a4e8f397-44ce-4ff9-86a3-20b413abf962"),
                            City = "Novi Sad",
                            Country = "Serbia",
                            Postcode = 21000,
                            Street = "Partizanska",
                            StreetNumber = "33"
                        },
                        new
                        {
                            Id = new Guid("1bc87db4-ebae-4c3c-a69e-d822c0801704"),
                            City = "Novi Sad",
                            Country = "Serbia",
                            Postcode = 21000,
                            Street = "JNA",
                            StreetNumber = "33"
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Appointments.Model.Appointment", b =>
                {
                    b.HasOne("HospitalLibrary.Doctors.Model.Doctor", "Doctor")
                        .WithMany("Appointments")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalLibrary.Patients.Model.Patient", "Patient")
                        .WithMany("Appointments")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("HospitalLibrary.sharedModel.DateRange", "Duration", b1 =>
                        {
                            b1.Property<Guid>("AppointmentId")
                                .HasColumnType("uuid");

                            b1.Property<DateTime>("From")
                                .HasColumnType("timestamp without time zone");

                            b1.Property<DateTime>("To")
                                .HasColumnType("timestamp without time zone");

                            b1.HasKey("AppointmentId");

                            b1.ToTable("Appointments");

                            b1.WithOwner()
                                .HasForeignKey("AppointmentId");

                            b1.HasData(
                                new
                                {
                                    AppointmentId = new Guid("9e8cc086-bfd4-49bb-9cec-b3779175e00d"),
                                    From = new DateTime(2022, 10, 27, 15, 0, 0, 0, DateTimeKind.Unspecified),
                                    To = new DateTime(2022, 10, 27, 15, 15, 0, 0, DateTimeKind.Unspecified)
                                });
                        });

                    b.Navigation("Doctor");

                    b.Navigation("Duration");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("HospitalLibrary.Core.Model.Floor", b =>
                {
                    b.HasOne("HospitalLibrary.Core.Model.Building", "Building")
                        .WithMany("Floors")
                        .HasForeignKey("BuildingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Building");
                });

            modelBuilder.Entity("HospitalLibrary.Core.Model.Room", b =>
                {
                    b.HasOne("HospitalLibrary.Core.Model.Building", "Building")
                        .WithMany()
                        .HasForeignKey("BuildingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalLibrary.Core.Model.Floor", "Floor")
                        .WithMany("Rooms")
                        .HasForeignKey("FloorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Building");

                    b.Navigation("Floor");
                });

            modelBuilder.Entity("HospitalLibrary.Doctors.Model.Doctor", b =>
                {
                    b.HasOne("HospitalLibrary.sharedModel.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalLibrary.Core.Model.Room", "Room")
                        .WithOne("Doctor")
                        .HasForeignKey("HospitalLibrary.Doctors.Model.Doctor", "RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalLibrary.Doctors.Model.Specialization", "Specialization")
                        .WithMany("Doctors")
                        .HasForeignKey("SpecializationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalLibrary.Doctors.Model.WorkingSchedule", "WorkingSchedule")
                        .WithMany()
                        .HasForeignKey("WorkingScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("Room");

                    b.Navigation("Specialization");

                    b.Navigation("WorkingSchedule");
                });

            modelBuilder.Entity("HospitalLibrary.Doctors.Model.Holiday", b =>
                {
                    b.HasOne("HospitalLibrary.Doctors.Model.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId");

                    b.OwnsOne("HospitalLibrary.sharedModel.DateRange", "DateRange", b1 =>
                        {
                            b1.Property<Guid>("HolidayId")
                                .HasColumnType("uuid");

                            b1.Property<DateTime>("From")
                                .HasColumnType("timestamp without time zone");

                            b1.Property<DateTime>("To")
                                .HasColumnType("timestamp without time zone");

                            b1.HasKey("HolidayId");

                            b1.ToTable("Holiday");

                            b1.WithOwner()
                                .HasForeignKey("HolidayId");
                        });

                    b.Navigation("DateRange");

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("HospitalLibrary.Doctors.Model.WorkingSchedule", b =>
                {
                    b.OwnsOne("HospitalLibrary.sharedModel.DateRange", "DayOfWork", b1 =>
                        {
                            b1.Property<Guid>("WorkingScheduleId")
                                .HasColumnType("uuid");

                            b1.Property<DateTime>("From")
                                .HasColumnType("timestamp without time zone")
                                .HasColumnName("DayOfWorkFrom");

                            b1.Property<DateTime>("To")
                                .HasColumnType("timestamp without time zone")
                                .HasColumnName("DayOfWorkTo");

                            b1.HasKey("WorkingScheduleId");

                            b1.ToTable("WorkingSchedules");

                            b1.WithOwner()
                                .HasForeignKey("WorkingScheduleId");

                            b1.HasData(
                                new
                                {
                                    WorkingScheduleId = new Guid("3937c0a9-ac06-45ba-a1d7-656f8687596b"),
                                    From = new DateTime(2022, 10, 27, 8, 0, 0, 0, DateTimeKind.Unspecified),
                                    To = new DateTime(2022, 10, 27, 14, 0, 0, 0, DateTimeKind.Unspecified)
                                },
                                new
                                {
                                    WorkingScheduleId = new Guid("5be2491b-0fb1-4e77-a201-8f903b957cb6"),
                                    From = new DateTime(2022, 10, 27, 14, 0, 0, 0, DateTimeKind.Unspecified),
                                    To = new DateTime(2022, 10, 27, 22, 0, 0, 0, DateTimeKind.Unspecified)
                                });
                        });

                    b.OwnsOne("HospitalLibrary.sharedModel.DateRange", "ExpirationDate", b1 =>
                        {
                            b1.Property<Guid>("WorkingScheduleId")
                                .HasColumnType("uuid");

                            b1.Property<DateTime>("From")
                                .HasColumnType("timestamp without time zone")
                                .HasColumnName("ExpirationFrom");

                            b1.Property<DateTime>("To")
                                .HasColumnType("timestamp without time zone")
                                .HasColumnName("ExpirationTo");

                            b1.HasKey("WorkingScheduleId");

                            b1.ToTable("WorkingSchedules");

                            b1.WithOwner()
                                .HasForeignKey("WorkingScheduleId");

                            b1.HasData(
                                new
                                {
                                    WorkingScheduleId = new Guid("3937c0a9-ac06-45ba-a1d7-656f8687596b"),
                                    From = new DateTime(2022, 10, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                                    To = new DateTime(2023, 1, 27, 0, 0, 0, 0, DateTimeKind.Unspecified)
                                },
                                new
                                {
                                    WorkingScheduleId = new Guid("5be2491b-0fb1-4e77-a201-8f903b957cb6"),
                                    From = new DateTime(2022, 10, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                                    To = new DateTime(2023, 1, 27, 0, 0, 0, 0, DateTimeKind.Unspecified)
                                });
                        });

                    b.Navigation("DayOfWork");

                    b.Navigation("ExpirationDate");
                });

            modelBuilder.Entity("HospitalLibrary.Feedbacks.Model.Feedback", b =>
                {
                    b.HasOne("HospitalLibrary.Patients.Model.Patient", "patient")
                        .WithMany("Feedbacks")
                        .HasForeignKey("patientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("patient");
                });

            modelBuilder.Entity("HospitalLibrary.Patients.Model.Patient", b =>
                {
                    b.HasOne("HospitalLibrary.sharedModel.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");
                });

            modelBuilder.Entity("HospitalLibrary.Core.Model.Building", b =>
                {
                    b.Navigation("Floors");
                });

            modelBuilder.Entity("HospitalLibrary.Core.Model.Floor", b =>
                {
                    b.Navigation("Rooms");
                });

            modelBuilder.Entity("HospitalLibrary.Core.Model.Room", b =>
                {
                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("HospitalLibrary.Doctors.Model.Doctor", b =>
                {
                    b.Navigation("Appointments");
                });

            modelBuilder.Entity("HospitalLibrary.Doctors.Model.Specialization", b =>
                {
                    b.Navigation("Doctors");
                });

            modelBuilder.Entity("HospitalLibrary.Patients.Model.Patient", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Feedbacks");
                });
#pragma warning restore 612, 618
        }
    }
}
