// <auto-generated />
using System;
using HospitalLibrary.Settings;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace HospitalLibrary.Migrations
{
    [DbContext(typeof(HospitalDbContext))]
    [Migration("20221120082311_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.10")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("HospitalLibrary.ApplicationUsers.Model.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AddressId")
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Enabled")
                        .HasColumnType("boolean");

                    b.Property<string>("Jmbg")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .HasColumnType("text");

                    b.Property<string>("Surname")
                        .HasColumnType("text");

                    b.Property<int>("UserRole")
                        .HasColumnType("integer");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("ApplicationUsers");
                });

            modelBuilder.Entity("HospitalLibrary.Appointments.Model.Appointment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AppointmentState")
                        .HasColumnType("integer");

                    b.Property<int>("AppointmentType")
                        .HasColumnType("integer");

                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Emergent")
                        .HasColumnType("boolean");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.ToTable("Appointments");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c7bd98c9-7b7a-44c0-8896-ad69ae56ea19"),
                            AppointmentState = 0,
                            AppointmentType = 0,
                            DoctorId = new Guid("681eca4e-baa2-4474-90e0-b253f2d1c637"),
                            Emergent = false,
                            PatientId = new Guid("afe236ff-967b-41c7-ba26-c5f1278df839")
                        });
                });

            modelBuilder.Entity("HospitalLibrary.BloodConsumptions.Model.BloodConsumption", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Amount")
                        .HasColumnType("integer");

                    b.Property<Guid>("BloodUnitId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uuid");

                    b.Property<string>("Purpose")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("BloodUnitId");

                    b.ToTable("BloodConsumptions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b7d458d1-a6a1-468b-98b1-cd04efd7b352"),
                            Amount = 2,
                            BloodUnitId = new Guid("9fdf1d69-a9d3-46c9-a570-851859d257e5"),
                            Date = new DateTime(2022, 10, 27, 15, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = new Guid("86231727-bd1a-4c6f-bdce-6e894d5e1083"),
                            Purpose = "operation"
                        },
                        new
                        {
                            Id = new Guid("ff574304-2f54-45a1-9517-ea4f3d1c0e40"),
                            Amount = 4,
                            BloodUnitId = new Guid("9fdf1d69-a9d3-46c9-a570-851859d257e5"),
                            Date = new DateTime(2022, 11, 14, 15, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = new Guid("86231727-bd1a-4c6f-bdce-6e894d5e1083"),
                            Purpose = "operation"
                        });
                });

            modelBuilder.Entity("HospitalLibrary.BloodUnits.Model.BloodUnit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Amount")
                        .HasColumnType("integer");

                    b.Property<string>("BloodBankName")
                        .HasColumnType("text");

                    b.Property<int>("BloodType")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("BloodUnits");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9fdf1d69-a9d3-46c9-a570-851859d257e5"),
                            Amount = 7,
                            BloodBankName = "Moja Banka Krvi",
                            BloodType = 0
                        },
                        new
                        {
                            Id = new Guid("4dbc6e01-93a3-47c3-85e6-0d56e14d8262"),
                            Amount = 10,
                            BloodBankName = "Moja Banka Krvi",
                            BloodType = 7
                        },
                        new
                        {
                            Id = new Guid("d5672088-2d5b-46a2-a54c-fa2c57af74f9"),
                            Amount = 4,
                            BloodBankName = "Moja Banka Krvi",
                            BloodType = 0
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Doctors.Model.Specialization", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Specializations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e034644c-a520-4608-87c5-701dd90f910f"),
                            Name = "Surgeon"
                        },
                        new
                        {
                            Id = new Guid("2ebf0687-7b55-4315-ad23-b50280206e0f"),
                            Name = "General"
                        },
                        new
                        {
                            Id = new Guid("062c5502-a5f8-409d-8216-35b562dfd9b0"),
                            Name = "Dermatology"
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Doctors.Model.WorkingSchedule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("WorkingSchedules");

                    b.HasData(
                        new
                        {
                            Id = new Guid("fc57d210-23ed-4988-886a-80d647fd0734")
                        },
                        new
                        {
                            Id = new Guid("16180cd0-bfbf-4400-bd13-5b92a0f800f6")
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Feedbacks.Model.Feedback", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("isAnonymous")
                        .HasColumnType("boolean");

                    b.Property<bool>("isPublic")
                        .HasColumnType("boolean");

                    b.Property<Guid>("patientId")
                        .HasColumnType("uuid");

                    b.Property<int>("status")
                        .HasColumnType("integer");

                    b.Property<string>("text")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("patientId");

                    b.ToTable("Feedback");
                });

            modelBuilder.Entity("HospitalLibrary.Holidays.Model.Holiday", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uuid");

                    b.Property<int>("HolidayStatus")
                        .HasColumnType("integer");

                    b.Property<bool>("IsUrgent")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.ToTable("Holidays");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a1c0c9d2-c1da-45bf-937b-9162d05ee533"),
                            Description = "I want to go to Paralia",
                            DoctorId = new Guid("681eca4e-baa2-4474-90e0-b253f2d1c637"),
                            HolidayStatus = 0,
                            IsUrgent = false
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Medicines.Model.Medicine", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Amount")
                        .HasColumnType("integer");

                    b.Property<Guid?>("MedicinePrescriptionId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("MedicinePrescriptionId");

                    b.ToTable("Medicine");
                });

            modelBuilder.Entity("HospitalLibrary.Patients.Model.PatientAdmission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateOfAdmission")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DateOfDischarge")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uuid");

                    b.Property<string>("Reason")
                        .HasColumnType("text");

                    b.Property<Guid>("SelectedBedId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SelectedRoomId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.HasIndex("SelectedBedId");

                    b.HasIndex("SelectedRoomId");

                    b.ToTable("PatientAdmissions");
                });

            modelBuilder.Entity("HospitalLibrary.Prescriptions.Model.BloodPrescription", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TreatmentReportId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.HasIndex("TreatmentReportId");

                    b.ToTable("BloodPrescription");
                });

            modelBuilder.Entity("HospitalLibrary.Prescriptions.Model.MedicinePrescription", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<Guid>("MedicineId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TreatmentReportId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.HasIndex("TreatmentReportId");

                    b.ToTable("MedicinePrescription");
                });

            modelBuilder.Entity("HospitalLibrary.Rooms.Model.Building", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Buildings");

                    b.HasData(
                        new
                        {
                            Id = new Guid("247b3da1-d104-435f-899c-09968836b4d5"),
                            Name = "Stara bolnica"
                        },
                        new
                        {
                            Id = new Guid("7b396b61-d2be-4117-aff1-6c4699c3f6b4"),
                            Name = "Nova bolnica"
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Rooms.Model.Floor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BuildingId")
                        .HasColumnType("uuid");

                    b.Property<int>("FloorNumber")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("BuildingId");

                    b.ToTable("Floors");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6218ce52-4994-41fd-ab87-14c034907051"),
                            BuildingId = new Guid("247b3da1-d104-435f-899c-09968836b4d5"),
                            FloorNumber = 0,
                            Name = "F0"
                        },
                        new
                        {
                            Id = new Guid("005f1360-cac7-459a-b60f-02be8ef5afb3"),
                            BuildingId = new Guid("247b3da1-d104-435f-899c-09968836b4d5"),
                            FloorNumber = 1,
                            Name = "F1"
                        },
                        new
                        {
                            Id = new Guid("1fb6d8e5-1e27-4151-aa72-838247d2facb"),
                            BuildingId = new Guid("247b3da1-d104-435f-899c-09968836b4d5"),
                            FloorNumber = 2,
                            Name = "F2"
                        },
                        new
                        {
                            Id = new Guid("e3099a88-19ff-4502-b029-64c595edd0de"),
                            BuildingId = new Guid("7b396b61-d2be-4117-aff1-6c4699c3f6b4"),
                            FloorNumber = 0,
                            Name = "F0"
                        },
                        new
                        {
                            Id = new Guid("620afb04-8715-4980-bc50-bb3ec22d8c11"),
                            BuildingId = new Guid("7b396b61-d2be-4117-aff1-6c4699c3f6b4"),
                            FloorNumber = 1,
                            Name = "F1"
                        },
                        new
                        {
                            Id = new Guid("d3b05db5-f8ed-41cb-8191-75b6db84b755"),
                            BuildingId = new Guid("7b396b61-d2be-4117-aff1-6c4699c3f6b4"),
                            FloorNumber = 2,
                            Name = "F2"
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Rooms.Model.GRoom", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Lenght")
                        .HasColumnType("integer");

                    b.Property<int>("PositionX")
                        .HasColumnType("integer");

                    b.Property<int>("PositionY")
                        .HasColumnType("integer");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("uuid");

                    b.Property<int>("Width")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("GRooms");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1991dd21-f5a2-4ffe-8631-d2270202fa83"),
                            Lenght = 5,
                            PositionX = 0,
                            PositionY = 0,
                            RoomId = new Guid("3f02fdde-e891-42ce-b9dc-dd0feac4be83"),
                            Width = 5
                        },
                        new
                        {
                            Id = new Guid("387ee7d6-1cad-4826-8a87-0b9694c1f5d8"),
                            Lenght = 5,
                            PositionX = 5,
                            PositionY = 0,
                            RoomId = new Guid("7681b552-67b6-409c-9b65-4e9fa561bd98"),
                            Width = 5
                        },
                        new
                        {
                            Id = new Guid("81300a08-34a7-48a9-a470-a71f95825169"),
                            Lenght = 5,
                            PositionX = 5,
                            PositionY = 0,
                            RoomId = new Guid("0dc7d399-4287-4eef-ad59-3693ace3891a"),
                            Width = 5
                        },
                        new
                        {
                            Id = new Guid("bbb81e5b-8c41-41e5-97fa-ca352f5ceb13"),
                            Lenght = 5,
                            PositionX = 5,
                            PositionY = 0,
                            RoomId = new Guid("2c4075f6-72c8-40a0-9019-b310125cc70f"),
                            Width = 5
                        },
                        new
                        {
                            Id = new Guid("ed21da8f-e15f-4402-89e5-19dcafa8b681"),
                            Lenght = 5,
                            PositionX = 5,
                            PositionY = 0,
                            RoomId = new Guid("6bd138d9-5182-4ec7-871f-73c4a89c1f08"),
                            Width = 5
                        },
                        new
                        {
                            Id = new Guid("c1ce5daf-a3e4-404f-883e-9656ab3ea0c0"),
                            Lenght = 5,
                            PositionX = 5,
                            PositionY = 0,
                            RoomId = new Guid("3d8f591e-3c68-4caf-88ca-76d9ab7b5f7e"),
                            Width = 5
                        },
                        new
                        {
                            Id = new Guid("f449a06f-a37e-48f7-8a56-33ea107f7dd2"),
                            Lenght = 5,
                            PositionX = 5,
                            PositionY = 0,
                            RoomId = new Guid("37f8dbe6-7654-49b0-ab75-17f75db4d8b6"),
                            Width = 5
                        },
                        new
                        {
                            Id = new Guid("a83a6567-4e51-4660-b9ca-7ab222ac9a37"),
                            Lenght = 5,
                            PositionX = 5,
                            PositionY = 0,
                            RoomId = new Guid("9fde4d11-8893-4038-a7eb-1ab69ba42532"),
                            Width = 5
                        },
                        new
                        {
                            Id = new Guid("6c0987f6-cbbd-43bd-b7c6-a91b44af7b93"),
                            Lenght = 5,
                            PositionX = 5,
                            PositionY = 0,
                            RoomId = new Guid("d86a2e16-0415-40f6-a4d9-2efe6e8a98eb"),
                            Width = 5
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Rooms.Model.Room", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BuildingId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("FloorId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("GRoomId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("FloorId");

                    b.ToTable("Rooms");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3f02fdde-e891-42ce-b9dc-dd0feac4be83"),
                            BuildingId = new Guid("247b3da1-d104-435f-899c-09968836b4d5"),
                            FloorId = new Guid("6218ce52-4994-41fd-ab87-14c034907051"),
                            GRoomId = new Guid("1991dd21-f5a2-4ffe-8631-d2270202fa83"),
                            Name = "A11"
                        },
                        new
                        {
                            Id = new Guid("7681b552-67b6-409c-9b65-4e9fa561bd98"),
                            BuildingId = new Guid("247b3da1-d104-435f-899c-09968836b4d5"),
                            FloorId = new Guid("6218ce52-4994-41fd-ab87-14c034907051"),
                            GRoomId = new Guid("387ee7d6-1cad-4826-8a87-0b9694c1f5d8"),
                            Name = "B11"
                        },
                        new
                        {
                            Id = new Guid("0dc7d399-4287-4eef-ad59-3693ace3891a"),
                            BuildingId = new Guid("247b3da1-d104-435f-899c-09968836b4d5"),
                            FloorId = new Guid("005f1360-cac7-459a-b60f-02be8ef5afb3"),
                            GRoomId = new Guid("81300a08-34a7-48a9-a470-a71f95825169"),
                            Name = "A12"
                        },
                        new
                        {
                            Id = new Guid("2c4075f6-72c8-40a0-9019-b310125cc70f"),
                            BuildingId = new Guid("247b3da1-d104-435f-899c-09968836b4d5"),
                            FloorId = new Guid("1fb6d8e5-1e27-4151-aa72-838247d2facb"),
                            GRoomId = new Guid("bbb81e5b-8c41-41e5-97fa-ca352f5ceb13"),
                            Name = "A13"
                        },
                        new
                        {
                            Id = new Guid("6bd138d9-5182-4ec7-871f-73c4a89c1f08"),
                            BuildingId = new Guid("7b396b61-d2be-4117-aff1-6c4699c3f6b4"),
                            FloorId = new Guid("e3099a88-19ff-4502-b029-64c595edd0de"),
                            GRoomId = new Guid("ed21da8f-e15f-4402-89e5-19dcafa8b681"),
                            Name = "A21"
                        },
                        new
                        {
                            Id = new Guid("3d8f591e-3c68-4caf-88ca-76d9ab7b5f7e"),
                            BuildingId = new Guid("7b396b61-d2be-4117-aff1-6c4699c3f6b4"),
                            FloorId = new Guid("e3099a88-19ff-4502-b029-64c595edd0de"),
                            GRoomId = new Guid("c1ce5daf-a3e4-404f-883e-9656ab3ea0c0"),
                            Name = "B21"
                        },
                        new
                        {
                            Id = new Guid("37f8dbe6-7654-49b0-ab75-17f75db4d8b6"),
                            BuildingId = new Guid("7b396b61-d2be-4117-aff1-6c4699c3f6b4"),
                            FloorId = new Guid("620afb04-8715-4980-bc50-bb3ec22d8c11"),
                            GRoomId = new Guid("f449a06f-a37e-48f7-8a56-33ea107f7dd2"),
                            Name = "A22"
                        },
                        new
                        {
                            Id = new Guid("9fde4d11-8893-4038-a7eb-1ab69ba42532"),
                            BuildingId = new Guid("7b396b61-d2be-4117-aff1-6c4699c3f6b4"),
                            FloorId = new Guid("d3b05db5-f8ed-41cb-8191-75b6db84b755"),
                            GRoomId = new Guid("a83a6567-4e51-4660-b9ca-7ab222ac9a37"),
                            Name = "C23"
                        },
                        new
                        {
                            Id = new Guid("d86a2e16-0415-40f6-a4d9-2efe6e8a98eb"),
                            BuildingId = new Guid("7b396b61-d2be-4117-aff1-6c4699c3f6b4"),
                            FloorId = new Guid("d3b05db5-f8ed-41cb-8191-75b6db84b755"),
                            GRoomId = new Guid("6c0987f6-cbbd-43bd-b7c6-a91b44af7b93"),
                            Name = "B23"
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Rooms.Model.RoomBed", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsFree")
                        .HasColumnType("boolean");

                    b.Property<string>("Number")
                        .HasColumnType("text");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RoomId");

                    b.ToTable("RoomBeds");

                    b.HasData(
                        new
                        {
                            Id = new Guid("bd39cb77-3c3c-4aa8-a0a4-061a2167854c"),
                            IsFree = true,
                            Number = "11A1",
                            RoomId = new Guid("3f02fdde-e891-42ce-b9dc-dd0feac4be83")
                        },
                        new
                        {
                            Id = new Guid("56fc9f62-ef6c-4af1-a045-91255a1d6241"),
                            IsFree = true,
                            Number = "11A2",
                            RoomId = new Guid("3f02fdde-e891-42ce-b9dc-dd0feac4be83")
                        },
                        new
                        {
                            Id = new Guid("4fac29d4-af1b-4188-b8d1-1573e5b5d7e2"),
                            IsFree = true,
                            Number = "11A3",
                            RoomId = new Guid("3f02fdde-e891-42ce-b9dc-dd0feac4be83")
                        },
                        new
                        {
                            Id = new Guid("464edacf-91f5-43c5-8e03-eac7ac298e39"),
                            IsFree = true,
                            Number = "11A4",
                            RoomId = new Guid("3f02fdde-e891-42ce-b9dc-dd0feac4be83")
                        },
                        new
                        {
                            Id = new Guid("c4e80132-c5b1-4040-8613-584031a4ec7d"),
                            IsFree = true,
                            Number = "12A1",
                            RoomId = new Guid("7681b552-67b6-409c-9b65-4e9fa561bd98")
                        },
                        new
                        {
                            Id = new Guid("ec9d5531-a9ae-4632-8172-0f7655ba4d83"),
                            IsFree = true,
                            Number = "12A2",
                            RoomId = new Guid("7681b552-67b6-409c-9b65-4e9fa561bd98")
                        },
                        new
                        {
                            Id = new Guid("88cfdb7e-8aa1-4a5e-885c-fce84e190bab"),
                            IsFree = true,
                            Number = "12A3",
                            RoomId = new Guid("7681b552-67b6-409c-9b65-4e9fa561bd98")
                        },
                        new
                        {
                            Id = new Guid("f87cc0d7-b6eb-4a10-8ade-677313ee011d"),
                            IsFree = true,
                            Number = "12A4",
                            RoomId = new Guid("7681b552-67b6-409c-9b65-4e9fa561bd98")
                        },
                        new
                        {
                            Id = new Guid("5620f40e-0250-4f23-aff0-5354649ed625"),
                            IsFree = true,
                            Number = "12A5",
                            RoomId = new Guid("7681b552-67b6-409c-9b65-4e9fa561bd98")
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Rooms.Model.RoomEquipment", b =>
                {
                    b.Property<Guid>("RoomEquipmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Amount")
                        .HasColumnType("integer");

                    b.Property<string>("EquipmentName")
                        .HasColumnType("text");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("uuid");

                    b.HasKey("RoomEquipmentId");

                    b.HasIndex("RoomId");

                    b.ToTable("RoomEquipment");

                    b.HasData(
                        new
                        {
                            RoomEquipmentId = new Guid("8e0172d8-7943-465a-ae5e-a0729e463630"),
                            Amount = 15,
                            EquipmentName = "SURGICAL_TABLES",
                            RoomId = new Guid("3f02fdde-e891-42ce-b9dc-dd0feac4be83")
                        },
                        new
                        {
                            RoomEquipmentId = new Guid("720f33e7-8db0-41d1-b460-8e72578c54d3"),
                            Amount = 10,
                            EquipmentName = "ANESTHESIA",
                            RoomId = new Guid("7681b552-67b6-409c-9b65-4e9fa561bd98")
                        },
                        new
                        {
                            RoomEquipmentId = new Guid("a6522991-cc70-43d0-956e-9ed10adc8c1d"),
                            Amount = 3,
                            EquipmentName = "EKG_MACHINE",
                            RoomId = new Guid("0dc7d399-4287-4eef-ad59-3693ace3891a")
                        },
                        new
                        {
                            RoomEquipmentId = new Guid("05dba85d-c05c-497b-9be8-5cf546373afb"),
                            Amount = 1,
                            EquipmentName = "ANESTHESIA",
                            RoomId = new Guid("2c4075f6-72c8-40a0-9019-b310125cc70f")
                        },
                        new
                        {
                            RoomEquipmentId = new Guid("d843e4c0-8d80-4c13-839c-59d260a17f64"),
                            Amount = 2,
                            EquipmentName = "EKG_MACHINE",
                            RoomId = new Guid("6bd138d9-5182-4ec7-871f-73c4a89c1f08")
                        },
                        new
                        {
                            RoomEquipmentId = new Guid("4dfb4036-d6bb-4001-bd9a-ac156d7aad24"),
                            Amount = 4,
                            EquipmentName = "SURGICAL_TABLES",
                            RoomId = new Guid("3d8f591e-3c68-4caf-88ca-76d9ab7b5f7e")
                        },
                        new
                        {
                            RoomEquipmentId = new Guid("38db18cc-3706-4ab6-bdb5-e8d9377ff52b"),
                            Amount = 6,
                            EquipmentName = "BANDAGE",
                            RoomId = new Guid("37f8dbe6-7654-49b0-ab75-17f75db4d8b6")
                        },
                        new
                        {
                            RoomEquipmentId = new Guid("c0211363-f1bb-47e6-9e9c-09cf92dc03d7"),
                            Amount = 3,
                            EquipmentName = "ANESTHESIA",
                            RoomId = new Guid("9fde4d11-8893-4038-a7eb-1ab69ba42532")
                        },
                        new
                        {
                            RoomEquipmentId = new Guid("d8328742-b4dc-4374-90b6-25a82558b180"),
                            Amount = 9,
                            EquipmentName = "SURGICAL_TABLES",
                            RoomId = new Guid("d86a2e16-0415-40f6-a4d9-2efe6e8a98eb")
                        });
                });

            modelBuilder.Entity("HospitalLibrary.TreatmentReports.Model.TreatmentReport", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uuid");

                    b.Property<string>("ReasonOfDischarge")
                        .HasColumnType("text");

                    b.Property<string>("ReasonOfHospitalization")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.ToTable("TreatmentReport");
                });

            modelBuilder.Entity("HospitalLibrary.sharedModel.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("City")
                        .HasColumnType("text");

                    b.Property<string>("Country")
                        .HasColumnType("text");

                    b.Property<int>("Postcode")
                        .HasColumnType("integer");

                    b.Property<string>("Street")
                        .HasColumnType("text");

                    b.Property<string>("StreetNumber")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Addresses");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8350b55a-4215-432b-a03c-605cc19bfdbf"),
                            City = "Novi Sad",
                            Country = "Serbia",
                            Postcode = 21000,
                            Street = "Kosovska",
                            StreetNumber = "23A"
                        },
                        new
                        {
                            Id = new Guid("4ee3dd03-1121-478f-aee1-4c67916278d2"),
                            City = "Novi Sad",
                            Country = "Serbia",
                            Postcode = 21000,
                            Street = "Partizanska",
                            StreetNumber = "33"
                        },
                        new
                        {
                            Id = new Guid("052d4fb1-0e28-4ff1-947d-b8de98559318"),
                            City = "Novi Sad",
                            Country = "Serbia",
                            Postcode = 21000,
                            Street = "JNA",
                            StreetNumber = "33"
                        });
                });

            modelBuilder.Entity("HospitalLibrary.sharedModel.Ingredient", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Ingredient");
                });

            modelBuilder.Entity("IngredientMedicine", b =>
                {
                    b.Property<Guid>("IngredientsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MedicinesId")
                        .HasColumnType("uuid");

                    b.HasKey("IngredientsId", "MedicinesId");

                    b.HasIndex("MedicinesId");

                    b.ToTable("IngredientMedicine");
                });

            modelBuilder.Entity("IngredientPatient", b =>
                {
                    b.Property<Guid>("AllergiesId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PatientsId")
                        .HasColumnType("uuid");

                    b.HasKey("AllergiesId", "PatientsId");

                    b.HasIndex("PatientsId");

                    b.ToTable("IngredientPatient");
                });

            modelBuilder.Entity("HospitalLibrary.Doctors.Model.Doctor", b =>
                {
                    b.HasBaseType("HospitalLibrary.ApplicationUsers.Model.ApplicationUser");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SpecializationId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("WorkingScheduleId")
                        .HasColumnType("uuid");

                    b.HasIndex("RoomId")
                        .IsUnique();

                    b.HasIndex("SpecializationId");

                    b.HasIndex("WorkingScheduleId");

                    b.ToTable("Doctors");

                    b.HasData(
                        new
                        {
                            Id = new Guid("86231727-bd1a-4c6f-bdce-6e894d5e1083"),
                            AddressId = new Guid("4ee3dd03-1121-478f-aee1-4c67916278d2"),
                            Email = "DjordjeLopov@gmail.com",
                            Enabled = true,
                            Jmbg = "99999999",
                            Name = "Djordje",
                            Password = "VNEXwZIHrujyvlg0wnmHM2FkQ52BKSkUTv5Gobgj4MeeAADy",
                            Phone = "+612222222",
                            Surname = "Vuckovic",
                            UserRole = 0,
                            Username = "Tadjo",
                            RoomId = new Guid("7681b552-67b6-409c-9b65-4e9fa561bd98"),
                            SpecializationId = new Guid("062c5502-a5f8-409d-8216-35b562dfd9b0"),
                            WorkingScheduleId = new Guid("fc57d210-23ed-4988-886a-80d647fd0734")
                        },
                        new
                        {
                            Id = new Guid("681eca4e-baa2-4474-90e0-b253f2d1c637"),
                            AddressId = new Guid("8350b55a-4215-432b-a03c-605cc19bfdbf"),
                            Email = "Cajons@gmail.com",
                            Enabled = true,
                            Jmbg = "99999999",
                            Name = "Ilija",
                            Password = "VNEXwZIHrujyvlg0wnmHM2FkQ52BKSkUTv5Gobgj4MeeAADy",
                            Phone = "+612222222",
                            Surname = "Maric",
                            UserRole = 0,
                            Username = "Ilija",
                            RoomId = new Guid("3f02fdde-e891-42ce-b9dc-dd0feac4be83"),
                            SpecializationId = new Guid("062c5502-a5f8-409d-8216-35b562dfd9b0"),
                            WorkingScheduleId = new Guid("fc57d210-23ed-4988-886a-80d647fd0734")
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Managers.Manager", b =>
                {
                    b.HasBaseType("HospitalLibrary.ApplicationUsers.Model.ApplicationUser");

                    b.ToTable("Managers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("56c90b7c-f5c3-4500-84c7-ed5b2c0292a6"),
                            AddressId = new Guid("052d4fb1-0e28-4ff1-947d-b8de98559318"),
                            Email = "psw.isa.mail@gmail.com",
                            Enabled = true,
                            Jmbg = "99999999",
                            Name = "Manager",
                            Password = "VNEXwZIHrujyvlg0wnmHM2FkQ52BKSkUTv5Gobgj4MeeAADy",
                            Phone = "+612222222",
                            Surname = "Manger",
                            UserRole = 1,
                            Username = "Manager"
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Patients.Model.Patient", b =>
                {
                    b.HasBaseType("HospitalLibrary.ApplicationUsers.Model.ApplicationUser");

                    b.Property<int>("Gender")
                        .HasColumnType("integer");

                    b.ToTable("Patients");

                    b.HasData(
                        new
                        {
                            Id = new Guid("afe236ff-967b-41c7-ba26-c5f1278df839"),
                            AddressId = new Guid("8350b55a-4215-432b-a03c-605cc19bfdbf"),
                            Email = "psw.isa.mail@gmail.com",
                            Enabled = true,
                            Jmbg = "99999999",
                            Name = "Sale",
                            Password = "VNEXwZIHrujyvlg0wnmHM2FkQ52BKSkUTv5Gobgj4MeeAADy",
                            Phone = "+612222222",
                            Surname = "Lave",
                            UserRole = 2,
                            Username = "Sale",
                            Gender = 0
                        },
                        new
                        {
                            Id = new Guid("6e9cc5e9-55e0-4aea-bda7-a05af18c948b"),
                            AddressId = new Guid("052d4fb1-0e28-4ff1-947d-b8de98559318"),
                            Email = "psw.isa.mail@gmail.com",
                            Enabled = true,
                            Jmbg = "99999999",
                            Name = "Miki",
                            Password = "VNEXwZIHrujyvlg0wnmHM2FkQ52BKSkUTv5Gobgj4MeeAADy",
                            Phone = "+612222222",
                            Surname = "Djuricic",
                            UserRole = 2,
                            Username = "Miki",
                            Gender = 0
                        });
                });

            modelBuilder.Entity("HospitalLibrary.ApplicationUsers.Model.ApplicationUser", b =>
                {
                    b.HasOne("HospitalLibrary.sharedModel.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");
                });

            modelBuilder.Entity("HospitalLibrary.Appointments.Model.Appointment", b =>
                {
                    b.HasOne("HospitalLibrary.Doctors.Model.Doctor", "Doctor")
                        .WithMany("Appointments")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalLibrary.Patients.Model.Patient", "Patient")
                        .WithMany("Appointments")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("HospitalLibrary.sharedModel.DateRange", "Duration", b1 =>
                        {
                            b1.Property<Guid>("AppointmentId")
                                .HasColumnType("uuid");

                            b1.Property<DateTime>("From")
                                .HasColumnType("timestamp without time zone");

                            b1.Property<DateTime>("To")
                                .HasColumnType("timestamp without time zone");

                            b1.HasKey("AppointmentId");

                            b1.ToTable("Appointments");

                            b1.WithOwner()
                                .HasForeignKey("AppointmentId");

                            b1.HasData(
                                new
                                {
                                    AppointmentId = new Guid("c7bd98c9-7b7a-44c0-8896-ad69ae56ea19"),
                                    From = new DateTime(2023, 7, 27, 10, 0, 0, 0, DateTimeKind.Unspecified),
                                    To = new DateTime(2023, 7, 27, 10, 30, 0, 0, DateTimeKind.Unspecified)
                                });
                        });

                    b.Navigation("Doctor");

                    b.Navigation("Duration");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("HospitalLibrary.BloodConsumptions.Model.BloodConsumption", b =>
                {
                    b.HasOne("HospitalLibrary.BloodUnits.Model.BloodUnit", "BloodUnit")
                        .WithMany("Consumptions")
                        .HasForeignKey("BloodUnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BloodUnit");
                });

            modelBuilder.Entity("HospitalLibrary.Doctors.Model.WorkingSchedule", b =>
                {
                    b.OwnsOne("HospitalLibrary.sharedModel.DateRange", "DayOfWork", b1 =>
                        {
                            b1.Property<Guid>("WorkingScheduleId")
                                .HasColumnType("uuid");

                            b1.Property<DateTime>("From")
                                .HasColumnType("timestamp without time zone")
                                .HasColumnName("DayOfWorkFrom");

                            b1.Property<DateTime>("To")
                                .HasColumnType("timestamp without time zone")
                                .HasColumnName("DayOfWorkTo");

                            b1.HasKey("WorkingScheduleId");

                            b1.ToTable("WorkingSchedules");

                            b1.WithOwner()
                                .HasForeignKey("WorkingScheduleId");

                            b1.HasData(
                                new
                                {
                                    WorkingScheduleId = new Guid("fc57d210-23ed-4988-886a-80d647fd0734"),
                                    From = new DateTime(2022, 10, 27, 8, 0, 0, 0, DateTimeKind.Unspecified),
                                    To = new DateTime(2023, 12, 27, 14, 0, 0, 0, DateTimeKind.Unspecified)
                                },
                                new
                                {
                                    WorkingScheduleId = new Guid("16180cd0-bfbf-4400-bd13-5b92a0f800f6"),
                                    From = new DateTime(2022, 10, 27, 14, 0, 0, 0, DateTimeKind.Unspecified),
                                    To = new DateTime(2022, 10, 27, 22, 0, 0, 0, DateTimeKind.Unspecified)
                                });
                        });

                    b.OwnsOne("HospitalLibrary.sharedModel.DateRange", "ExpirationDate", b1 =>
                        {
                            b1.Property<Guid>("WorkingScheduleId")
                                .HasColumnType("uuid");

                            b1.Property<DateTime>("From")
                                .HasColumnType("timestamp without time zone")
                                .HasColumnName("ExpirationFrom");

                            b1.Property<DateTime>("To")
                                .HasColumnType("timestamp without time zone")
                                .HasColumnName("ExpirationTo");

                            b1.HasKey("WorkingScheduleId");

                            b1.ToTable("WorkingSchedules");

                            b1.WithOwner()
                                .HasForeignKey("WorkingScheduleId");

                            b1.HasData(
                                new
                                {
                                    WorkingScheduleId = new Guid("fc57d210-23ed-4988-886a-80d647fd0734"),
                                    From = new DateTime(2022, 10, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                                    To = new DateTime(2023, 12, 27, 0, 0, 0, 0, DateTimeKind.Unspecified)
                                },
                                new
                                {
                                    WorkingScheduleId = new Guid("16180cd0-bfbf-4400-bd13-5b92a0f800f6"),
                                    From = new DateTime(2022, 10, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                                    To = new DateTime(2023, 12, 27, 0, 0, 0, 0, DateTimeKind.Unspecified)
                                });
                        });

                    b.Navigation("DayOfWork");

                    b.Navigation("ExpirationDate");
                });

            modelBuilder.Entity("HospitalLibrary.Feedbacks.Model.Feedback", b =>
                {
                    b.HasOne("HospitalLibrary.Patients.Model.Patient", "patient")
                        .WithMany("Feedbacks")
                        .HasForeignKey("patientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("patient");
                });

            modelBuilder.Entity("HospitalLibrary.Holidays.Model.Holiday", b =>
                {
                    b.HasOne("HospitalLibrary.Doctors.Model.Doctor", "Doctor")
                        .WithMany("Holidays")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("HospitalLibrary.sharedModel.DateRange", "DateRange", b1 =>
                        {
                            b1.Property<Guid>("HolidayId")
                                .HasColumnType("uuid");

                            b1.Property<DateTime>("From")
                                .HasColumnType("timestamp without time zone");

                            b1.Property<DateTime>("To")
                                .HasColumnType("timestamp without time zone");

                            b1.HasKey("HolidayId");

                            b1.ToTable("Holidays");

                            b1.WithOwner()
                                .HasForeignKey("HolidayId");

                            b1.HasData(
                                new
                                {
                                    HolidayId = new Guid("a1c0c9d2-c1da-45bf-937b-9162d05ee533"),
                                    From = new DateTime(2022, 10, 27, 10, 0, 0, 0, DateTimeKind.Unspecified),
                                    To = new DateTime(2022, 10, 27, 10, 30, 0, 0, DateTimeKind.Unspecified)
                                });
                        });

                    b.Navigation("DateRange");

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("HospitalLibrary.Medicines.Model.Medicine", b =>
                {
                    b.HasOne("HospitalLibrary.Prescriptions.Model.MedicinePrescription", null)
                        .WithMany("Medicines")
                        .HasForeignKey("MedicinePrescriptionId");
                });

            modelBuilder.Entity("HospitalLibrary.Patients.Model.PatientAdmission", b =>
                {
                    b.HasOne("HospitalLibrary.Patients.Model.Patient", "Patient")
                        .WithMany("PatientAdmissions")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalLibrary.Rooms.Model.RoomBed", "SelectedBed")
                        .WithMany()
                        .HasForeignKey("SelectedBedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalLibrary.Rooms.Model.Room", "SelectedRoom")
                        .WithMany()
                        .HasForeignKey("SelectedRoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");

                    b.Navigation("SelectedBed");

                    b.Navigation("SelectedRoom");
                });

            modelBuilder.Entity("HospitalLibrary.Prescriptions.Model.BloodPrescription", b =>
                {
                    b.HasOne("HospitalLibrary.Patients.Model.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalLibrary.TreatmentReports.Model.TreatmentReport", "TreatmentReport")
                        .WithMany("BloodPrescriptions")
                        .HasForeignKey("TreatmentReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");

                    b.Navigation("TreatmentReport");
                });

            modelBuilder.Entity("HospitalLibrary.Prescriptions.Model.MedicinePrescription", b =>
                {
                    b.HasOne("HospitalLibrary.Patients.Model.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalLibrary.TreatmentReports.Model.TreatmentReport", "TreatmentReport")
                        .WithMany("MedicinePrescriptions")
                        .HasForeignKey("TreatmentReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");

                    b.Navigation("TreatmentReport");
                });

            modelBuilder.Entity("HospitalLibrary.Rooms.Model.Floor", b =>
                {
                    b.HasOne("HospitalLibrary.Rooms.Model.Building", "Building")
                        .WithMany("Floors")
                        .HasForeignKey("BuildingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Building");
                });

            modelBuilder.Entity("HospitalLibrary.Rooms.Model.Room", b =>
                {
                    b.HasOne("HospitalLibrary.Rooms.Model.Floor", "Floor")
                        .WithMany("Rooms")
                        .HasForeignKey("FloorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Floor");
                });

            modelBuilder.Entity("HospitalLibrary.Rooms.Model.RoomBed", b =>
                {
                    b.HasOne("HospitalLibrary.Rooms.Model.Room", "Room")
                        .WithMany("Beds")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Room");
                });

            modelBuilder.Entity("HospitalLibrary.Rooms.Model.RoomEquipment", b =>
                {
                    b.HasOne("HospitalLibrary.Rooms.Model.Room", null)
                        .WithMany("Equipments")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HospitalLibrary.TreatmentReports.Model.TreatmentReport", b =>
                {
                    b.HasOne("HospitalLibrary.Patients.Model.Patient", "Patient")
                        .WithMany("TreatmentReports")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("HospitalLibrary.sharedModel.DateRange", "DateRange", b1 =>
                        {
                            b1.Property<Guid>("TreatmentReportId")
                                .HasColumnType("uuid");

                            b1.Property<DateTime>("From")
                                .HasColumnType("timestamp without time zone");

                            b1.Property<DateTime>("To")
                                .HasColumnType("timestamp without time zone");

                            b1.HasKey("TreatmentReportId");

                            b1.ToTable("TreatmentReport");

                            b1.WithOwner()
                                .HasForeignKey("TreatmentReportId");
                        });

                    b.Navigation("DateRange");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("IngredientMedicine", b =>
                {
                    b.HasOne("HospitalLibrary.sharedModel.Ingredient", null)
                        .WithMany()
                        .HasForeignKey("IngredientsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalLibrary.Medicines.Model.Medicine", null)
                        .WithMany()
                        .HasForeignKey("MedicinesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("IngredientPatient", b =>
                {
                    b.HasOne("HospitalLibrary.sharedModel.Ingredient", null)
                        .WithMany()
                        .HasForeignKey("AllergiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalLibrary.Patients.Model.Patient", null)
                        .WithMany()
                        .HasForeignKey("PatientsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HospitalLibrary.Doctors.Model.Doctor", b =>
                {
                    b.HasOne("HospitalLibrary.ApplicationUsers.Model.ApplicationUser", null)
                        .WithOne()
                        .HasForeignKey("HospitalLibrary.Doctors.Model.Doctor", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalLibrary.Rooms.Model.Room", "Room")
                        .WithOne("Doctor")
                        .HasForeignKey("HospitalLibrary.Doctors.Model.Doctor", "RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalLibrary.Doctors.Model.Specialization", "Specialization")
                        .WithMany("Doctors")
                        .HasForeignKey("SpecializationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalLibrary.Doctors.Model.WorkingSchedule", "WorkingSchedule")
                        .WithMany()
                        .HasForeignKey("WorkingScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Room");

                    b.Navigation("Specialization");

                    b.Navigation("WorkingSchedule");
                });

            modelBuilder.Entity("HospitalLibrary.Managers.Manager", b =>
                {
                    b.HasOne("HospitalLibrary.ApplicationUsers.Model.ApplicationUser", null)
                        .WithOne()
                        .HasForeignKey("HospitalLibrary.Managers.Manager", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HospitalLibrary.Patients.Model.Patient", b =>
                {
                    b.HasOne("HospitalLibrary.ApplicationUsers.Model.ApplicationUser", null)
                        .WithOne()
                        .HasForeignKey("HospitalLibrary.Patients.Model.Patient", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HospitalLibrary.BloodUnits.Model.BloodUnit", b =>
                {
                    b.Navigation("Consumptions");
                });

            modelBuilder.Entity("HospitalLibrary.Doctors.Model.Specialization", b =>
                {
                    b.Navigation("Doctors");
                });

            modelBuilder.Entity("HospitalLibrary.Prescriptions.Model.MedicinePrescription", b =>
                {
                    b.Navigation("Medicines");
                });

            modelBuilder.Entity("HospitalLibrary.Rooms.Model.Building", b =>
                {
                    b.Navigation("Floors");
                });

            modelBuilder.Entity("HospitalLibrary.Rooms.Model.Floor", b =>
                {
                    b.Navigation("Rooms");
                });

            modelBuilder.Entity("HospitalLibrary.Rooms.Model.Room", b =>
                {
                    b.Navigation("Beds");

                    b.Navigation("Doctor");

                    b.Navigation("Equipments");
                });

            modelBuilder.Entity("HospitalLibrary.TreatmentReports.Model.TreatmentReport", b =>
                {
                    b.Navigation("BloodPrescriptions");

                    b.Navigation("MedicinePrescriptions");
                });

            modelBuilder.Entity("HospitalLibrary.Doctors.Model.Doctor", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Holidays");
                });

            modelBuilder.Entity("HospitalLibrary.Patients.Model.Patient", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Feedbacks");

                    b.Navigation("PatientAdmissions");

                    b.Navigation("TreatmentReports");
                });
#pragma warning restore 612, 618
        }
    }
}
